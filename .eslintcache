[{"/Users/aj/Projects/personal/portfolio/src/App.js":"1","/Users/aj/Projects/personal/portfolio/src/reportWebVitals.js":"2","/Users/aj/Projects/personal/portfolio/src/index.js":"3","/Users/aj/Projects/personal/portfolio/src/Containers/Home/Home.js":"4","/Users/aj/Projects/personal/portfolio/src/Containers/About/About.js":"5","/Users/aj/Projects/personal/portfolio/src/Containers/Skills/Skills.js":"6","/Users/aj/Projects/personal/portfolio/src/Containers/Experience/Experience.js":"7","/Users/aj/Projects/personal/portfolio/src/Containers/Resume/Resume.js":"8","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Showcase.js":"9","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Kanban1.js":"10","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/PipeView.js":"11","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/DealsList.js":"12","/Users/aj/Projects/personal/portfolio/src/libs/validators.js":"13","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Explanation.js":"14","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Kanban2.js":"15","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/PipeView.js":"16","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Explanation.js":"17","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/OverviewStats.js":"18","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/OtherActs.js":"19","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Inbox.js":"20","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/AllActivities.js":"21","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Tasks.js":"22","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/InboxHeader.js":"23","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Explanation.js":"24","/Users/aj/Projects/personal/portfolio/src/Containers/Contact/Contact.js":"25","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Overview.js":"26","/Users/aj/Projects/personal/portfolio/src/Containers/Badges/Badges.js":"27"},{"size":5877,"mtime":1611661576013,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1610542186091,"results":"30","hashOfConfig":"29"},{"size":449,"mtime":1610708075183,"results":"31","hashOfConfig":"29"},{"size":1689,"mtime":1611585251215,"results":"32","hashOfConfig":"29"},{"size":5150,"mtime":1610793531765,"results":"33","hashOfConfig":"29"},{"size":7397,"mtime":1611498366469,"results":"34","hashOfConfig":"29"},{"size":12675,"mtime":1610805444666,"results":"35","hashOfConfig":"29"},{"size":24006,"mtime":1611224634960,"results":"36","hashOfConfig":"29"},{"size":30097,"mtime":1611655840951,"results":"37","hashOfConfig":"29"},{"size":9963,"mtime":1611224652529,"results":"38","hashOfConfig":"29"},{"size":3717,"mtime":1610982697397,"results":"39","hashOfConfig":"29"},{"size":28608,"mtime":1611068222674,"results":"40","hashOfConfig":"29"},{"size":3558,"mtime":1610970869232,"results":"41","hashOfConfig":"29"},{"size":3314,"mtime":1611657511138,"results":"42","hashOfConfig":"29"},{"size":24891,"mtime":1611402112702,"results":"43","hashOfConfig":"29"},{"size":4242,"mtime":1611150837540,"results":"44","hashOfConfig":"29"},{"size":3415,"mtime":1611153440537,"results":"45","hashOfConfig":"29"},{"size":7033,"mtime":1611153673908,"results":"46","hashOfConfig":"29"},{"size":8342,"mtime":1611410469910,"results":"47","hashOfConfig":"29"},{"size":27744,"mtime":1611500416504,"results":"48","hashOfConfig":"29"},{"size":44403,"mtime":1611405745122,"results":"49","hashOfConfig":"29"},{"size":3125,"mtime":1611405644271,"results":"50","hashOfConfig":"29"},{"size":4944,"mtime":1611153673901,"results":"51","hashOfConfig":"29"},{"size":5201,"mtime":1611658469112,"results":"52","hashOfConfig":"29"},{"size":13691,"mtime":1611571827337,"results":"53","hashOfConfig":"29"},{"size":1248,"mtime":1611660343826,"results":"54","hashOfConfig":"29"},{"size":1825,"mtime":1611664240219,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18ibiat",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aj/Projects/personal/portfolio/src/App.js",[],"/Users/aj/Projects/personal/portfolio/src/reportWebVitals.js",[],["122","123"],"/Users/aj/Projects/personal/portfolio/src/index.js",[],["124","125"],"/Users/aj/Projects/personal/portfolio/src/Containers/Home/Home.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/About/About.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Skills/Skills.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Experience/Experience.js",[],["126","127"],"/Users/aj/Projects/personal/portfolio/src/Containers/Resume/Resume.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Showcase.js",["128"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Kanban1.js",[],["129","130"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/PipeView.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/DealsList.js",[],["131","132"],"/Users/aj/Projects/personal/portfolio/src/libs/validators.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Kanban2.js",["133"],"import React, {\n  useState,\n  useEffect\n  //useCallback\n} from \"react\";\n\nimport { isAfter, parseISO, isEqual, format } from \"date-fns\";\n\nimport {\n  Button,\n  Card,\n  //Table,\n  Row,\n  Col,\n  Select,\n  //Tabs,\n  Switch\n} from \"antd\";\n\nimport {\n  UserOutlined,\n  CalendarOutlined,\n  FilterOutlined\n  //UnorderedListOutlined,\n  //MailOutlined,\n  //DollarTwoTone,\n  //ContactsOutlined,\n  //HomeOutlined\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport PipeView from \"./PipeView\";\nimport Explanation from \"./Explanation\";\n\nimport \"./Kanban2.css\";\n\nconst { Option } = Select;\n//const { TabPane } = Tabs;\n\n//const mockDeals = require(\"./Mockdata/mockDeals.json\").data;\n//const mockActivities = require(\"../../mockdata/activities.json\").data;\n\nconst Kanban2 = props => {\n  const [dataLoaded, setLoaded] = useState(false);\n\n  const topColors = [\"#FC902B\", \"#2ADDF5\", \"#2A45F7\", \"#87ED90\"];\n  const todaysDate = format(new Date(), \"yyyy-MM-dd\");\n  const [allDeals, setAllDeals] = useState([]);\n  //const [activities, setActivities] = useState(props.activities);\n\n  const [selectedTeamId, setTeamId] = useState(0);\n  const [selectedPipeId, setPipeId] = useState(0);\n  const [filteredStages, setFilteredStages] = useState([]);\n  const [currentPipeDeals, setCurrentPipeDeals] = useState([]);\n  const [total, setTotal] = useState([]);\n  const [selectedUserId, setUserId] = useState(0);\n\n  const [currentDealActs, setCurrentDealActs] = useState([]);\n  //const [actShow, setActShow] = useState(true);\n  const [currentDeal, setCurrentDeal] = useState({});\n\n  const [currentTeamTarget, setCurrentTeamTarget] = useState(\n    props.currentTeamTarget\n  );\n  const [currentUserTarget, setCurrentUserTarget] = useState(\n    props.currentUserTarget\n  );\n  const [userQuota, setUserQuota] = useState(0);\n  const [userAchieved, setUserAchieved] = useState(0);\n  const [teamAchieved, setTeamAchieved] = useState(0);\n  const [teamQuota, setTeamQuota] = useState(0);\n  const [dealsInDND, setDNDDeals] = useState([]);\n  const [dealsValue, setDealsValue] = useState(0);\n  const [toggle, setToggle] = useState(true);\n\n  useEffect(() => {\n    //setAllDeals(props.deals);\n    //console.log(\"allDeals\", allDeals);\n    //console.log(\"activities\", activities);\n    //console.log(\"props.users\", props.users);\n\n    let deals = props.deals.filter(\n      deal =>\n        deal.isActive &&\n        (deal.statusId === 1 ||\n          deal.statusId === 3 ||\n          deal.statusId === 4 ||\n          deal.statusId === 6)\n    );\n\n    let teamId = props.teamId;\n    let pipeId = props.pipeId;\n    let stages = [];\n\n    if (pipeId > 0) {\n      stages = props.stages.filter(s => s.pipeId === pipeId && s.isActive);\n    }\n\n    let filteredDeals = [];\n\n    if (stages.length > 0) {\n      //console.log(\"stages length\", stages.length);\n      filteredDeals = deals.filter(ad => stages.find(s => s.id === ad.stageId));\n    }\n\n    setTeamId(teamId);\n    setPipeId(pipeId);\n    setFilteredStages(stages);\n    setCurrentPipeDeals(filteredDeals);\n    setUserId(props.selectedUserId);\n    setAllDeals(deals);\n\n    //console.log(\"teamId\", teamId);\n    //console.log(\"pipeId\", pipeId);\n    //console.log(\"stages\", stages);\n    //console.log(\"currentPipeDeals\", currentPipeDeals);\n    //console.log(\"currentPipeDeals\", filteredDeals);\n\n    updatePipeDeals(\n      stages,\n      pipeId,\n      filteredDeals,\n      props.orgs,\n      props.activities,\n      props.selectedUserId,\n      teamId\n    );\n  }, [\n    props.deals,\n    props.activities,\n    props.orgs,\n    props.pipelines,\n    props.stages,\n    props.selectedUserId,\n    props.teamId,\n    props.pipeId\n  ]);\n\n  const selectPipe = value => {\n    console.log(\"value\");\n    let pipeId = parseInt(value);\n    console.log(\"pipeId\");\n    let filtered = props.stages.filter(\n      stage => parseInt(stage.pipeId) === pipeId\n    );\n\n    let teamId = props.pipelines.filter(pipe => pipe.id === pipeId)[0].teamId;\n    console.log(\"teamId\", teamId);\n    let filteredDeals = [];\n    if (filtered.length > 0) {\n      //console.log(\"stages length\", stages.length);\n      filteredDeals = props.deals.filter(ad =>\n        filtered.find(s => s.id === ad.stageId)\n      );\n    }\n\n    setPipeId(pipeId);\n    setFilteredStages(filtered);\n    setTeamId(teamId);\n    setUserId(0);\n    //setCurrentPipeDeals(filteredDeals)\n\n    console.log(\"filtered\", filtered);\n\n    //console.log(\"teamId\", teamId);\n\n    updatePipeDeals(\n      filtered,\n      pipeId,\n      filteredDeals,\n      props.orgs,\n      props.activities,\n      0,\n      teamId\n    );\n  };\n\n  const handleSelectUser = value => {\n    console.log(\"value\", value);\n    let selectedUserId = parseInt(value);\n    setUserId(selectedUserId);\n    console.log(\"selectedUserId\", selectedUserId);\n    console.log(\"selectedPipeId\", selectedPipeId);\n    console.log(\"selectedTeamId\", selectedTeamId);\n\n    let filteredDeals = [];\n    if (selectedUserId > 0) {\n      //console.log(\"stages length\", stages.length);\n      filteredDeals = allDeals.filter(deal =>\n        filteredStages.find(\n          stage =>\n            parseInt(deal.stageId) === parseInt(stage.id) &&\n            parseInt(deal.userId) === parseInt(selectedUserId)\n        )\n      );\n    } else if (selectedUserId === -1) {\n      filteredDeals = allDeals.filter(\n        ad =>\n          props.usersByTeam[6].find(u => u.id === ad.userId) &&\n          filteredStages.find(s => s.id === ad.stageId)\n      );\n    } else if (selectedUserId === 0) {\n      filteredDeals = allDeals.filter(ad =>\n        filteredStages.find(s => s.id === ad.stageId)\n      );\n    }\n\n    updatePipeDeals(\n      filteredStages,\n      selectedPipeId,\n      filteredDeals,\n      props.orgs,\n      props.activities,\n      selectedUserId,\n      selectedTeamId\n    );\n  };\n\n  const onDragStart = (event, id) => {\n    console.log(\"dragstart on div/deal: \", id);\n    event.dataTransfer.setData(\"id\", id);\n  };\n\n  const onDragOver = event => {\n    event.preventDefault();\n  };\n\n  const onDrop = (event, stageId) => {\n    event.preventDefault();\n    let dealId = event.dataTransfer.getData(\"id\");\n\n    let originalStageID = currentPipeDeals.filter(\n      deal => deal.id === parseInt(dealId)\n    )[0].stageId;\n    //console.log(\"dealId\", dealId);\n    //console.log(\"originalStageID\", originalStageID);\n    /*\n    let newStageId = {\n      stageId: parseInt(stageId)\n    };\n*/\n    if (originalStageID !== parseInt(stageId)) {\n      let tempAllDeals = props.deals;\n      let tempFilteredDeals = currentPipeDeals;\n      let id = parseInt(dealId);\n\n      if (tempAllDeals.find(ad => ad.id === id)) {\n        tempAllDeals = tempAllDeals.map(ad => {\n          if (ad.id === id) {\n            ad.stageId = stageId;\n          }\n          return ad;\n        });\n      }\n      if (tempFilteredDeals.find(d => d.id === id)) {\n        tempFilteredDeals = tempFilteredDeals.map(d => {\n          if (d.id === id) {\n            d.stageId = stageId;\n          }\n          return d;\n        });\n      }\n      setCurrentPipeDeals(tempFilteredDeals);\n      setAllDeals(tempAllDeals);\n\n      updatePipeDeals(\n        filteredStages,\n        selectedPipeId,\n        tempAllDeals,\n        props.orgs,\n        props.activities,\n        selectedUserId,\n        selectedTeamId\n      );\n    }\n  };\n\n  const updateTargetsAndAchieved = teamId => {\n    console.log(\"props.userTargets\", props.userTargets);\n    let currentUserTarget =\n      props.userTargets !== null &&\n      props.userTargets !== undefined &&\n      selectedUserId !== 0 &&\n      props.userTargets.find(ut => ut.userId === selectedUserId)\n        ? props.userTargets.filter(ut => ut.userId === selectedUserId)[0]\n        : {};\n\n    let currentTeamTarget =\n      props.teamTargets !== null &&\n      props.teamTargets !== undefined &&\n      props.teamTargets.find(tt => tt.teamId === teamId)\n        ? props.teamTargets.filter(tt => tt.teamId === teamId)[0]\n        : {};\n\n    console.log(\"currentTeamTarget\", currentTeamTarget);\n    console.log(\"currentUserTarget\", currentUserTarget);\n    let userAchieved = 0;\n    let userQuota = 0;\n    let teamAchieved = 0;\n    let teamQuota = 0;\n    let cMN = parseInt(format(new Date(), \"MM\"));\n    console.log(\"cMN\", cMN);\n    let currentMonth =\n      cMN !== undefined && cMN !== null\n        ? cMN === 1\n          ? \"m1\"\n          : cMN === 2\n          ? \"m2\"\n          : cMN === 3\n          ? \"m3\"\n          : cMN === 4\n          ? \"m4\"\n          : cMN === 5\n          ? \"m5\"\n          : cMN === 6\n          ? \"m6\"\n          : cMN === 7\n          ? \"m7\"\n          : cMN === 8\n          ? \"m8\"\n          : cMN === 9\n          ? \"m9\"\n          : cMN === 10\n          ? \"m10\"\n          : cMN === 11\n          ? \"m11\"\n          : cMN === 12\n          ? \"m12\"\n          : null\n        : null;\n    console.log(\"currentMonth\", currentMonth);\n    if (currentUserTarget) {\n      switch (currentMonth) {\n        default:\n          break;\n        case \"m1\":\n          userQuota = currentUserTarget.m1;\n          break;\n        case \"m2\":\n          userQuota = currentUserTarget.m2;\n          break;\n        case \"m3\":\n          userQuota = currentUserTarget.m3;\n          break;\n        case \"m4\":\n          userQuota = currentUserTarget.m4;\n          break;\n        case \"m5\":\n          userQuota = currentUserTarget.m5;\n          break;\n        case \"m6\":\n          userQuota = currentUserTarget.m6;\n          break;\n        case \"m7\":\n          userQuota = currentUserTarget.m7;\n          break;\n        case \"m8\":\n          userQuota = currentUserTarget.m8;\n          break;\n        case \"m9\":\n          userQuota = currentUserTarget.m9;\n          break;\n        case \"m10\":\n          userQuota = currentUserTarget.m10;\n          break;\n        case \"m11\":\n          userQuota = currentUserTarget.m11;\n          break;\n        case \"m12\":\n          userQuota = currentUserTarget.m12;\n          break;\n      }\n    } else {\n      userQuota = 0;\n      switch (currentMonth) {\n        default:\n          break;\n        case \"m1\":\n          teamQuota = currentTeamTarget.m1;\n          break;\n        case \"m2\":\n          teamQuota = currentTeamTarget.m2;\n          break;\n        case \"m3\":\n          teamQuota = currentTeamTarget.m3;\n          break;\n        case \"m4\":\n          teamQuota = currentTeamTarget.m4;\n          break;\n        case \"m5\":\n          teamQuota = currentTeamTarget.m5;\n          break;\n        case \"m6\":\n          teamQuota = currentTeamTarget.m6;\n          break;\n        case \"m7\":\n          teamQuota = currentTeamTarget.m7;\n          break;\n        case \"m8\":\n          teamQuota = currentTeamTarget.m8;\n          break;\n        case \"m9\":\n          teamQuota = currentTeamTarget.m9;\n          break;\n        case \"m10\":\n          teamQuota = currentTeamTarget.m10;\n          break;\n        case \"m11\":\n          teamQuota = currentTeamTarget.m11;\n          break;\n        case \"m12\":\n          teamQuota = currentTeamTarget.m12;\n          break;\n      }\n    }\n    console.log(\"userQuota\", userQuota);\n    console.log(\"selectedUserId\", selectedUserId);\n    console.log(\"teamId\", teamId);\n    allDeals.forEach(ad => {\n      if (teamId === 3) {\n        if (\n          ad.wonDate !== null &&\n          ad.wonDate !== undefined &&\n          parseInt(format(parseISO(ad.wonDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.wonUserId !== null &&\n            ad.wonUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.wonUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      } else if (teamId === 1) {\n        if (\n          ad.mqlDate !== null &&\n          ad.mqlDate !== undefined &&\n          parseInt(format(parseISO(ad.mqlDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.mqlUserId !== null &&\n            ad.mqlUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.mqlUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      } else if (teamId === 2) {\n        if (\n          ad.sqlDate !== null &&\n          ad.sqlDate !== undefined &&\n          parseInt(format(parseISO(ad.sqlDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.sqlUserId !== null &&\n            ad.sqlUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.sqlUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      }\n    });\n    console.log(\"userAchieved\", userAchieved);\n    console.log(\"teamAchieved\", teamAchieved);\n\n    setCurrentTeamTarget(currentTeamTarget);\n    setCurrentUserTarget(currentUserTarget);\n    setUserQuota(userQuota);\n    setUserAchieved(userAchieved);\n    setTeamAchieved(teamAchieved);\n    setTeamQuota(teamQuota);\n    setLoaded(true);\n  };\n\n  const updatePipeDeals = (\n    filteredStages,\n    pipeId,\n    deals,\n    orgs,\n    activities,\n    selectedUserId,\n    teamId\n  ) => {\n    if (dataLoaded) setLoaded(false);\n    let object = [];\n    let filteredDeals = props.deals.filter(d =>\n      filteredStages.find(s => s.id === d.stageId)\n    );\n    let tempTotal = [];\n    //console.log(\"filteredDeals\", filteredDeals);\n\n    if (parseInt(selectedUserId) > 0) {\n      filteredDeals = filteredDeals.filter(\n        deal => deal.userId === parseInt(selectedUserId)\n      );\n\n      setCurrentPipeDeals(filteredDeals);\n    }\n    console.log(\"filteredDeals\", filteredDeals);\n\n    filteredStages.forEach(stage => {\n      tempTotal[stage.id] = 0;\n      filteredDeals.forEach(deal => {\n        //console.log(\"deal.dealValue\", deal.dealValue);\n\n        if (deal.stageId === stage.id) {\n          tempTotal[stage.id] +=\n            deal.dealValue !== null &&\n            deal.dealValue !== undefined &&\n            !isNaN(parseInt(deal.dealValue))\n              ? parseInt(deal.dealValue)\n              : 0;\n        }\n      });\n    });\n\n    console.log(\"tempTotal\", tempTotal);\n    setTotal(tempTotal);\n\n    let sum = 0;\n    if (filteredDeals !== undefined && filteredDeals.length > 0)\n      filteredDeals.forEach(deal => {\n        sum +=\n          deal.dealValue !== null &&\n          deal.dealValue !== undefined &&\n          !isNaN(parseInt(deal.dealValue))\n            ? parseInt(deal.dealValue)\n            : 0;\n      });\n\n    console.log(\"sum\", sum);\n    console.log(\"filteredDeals\", filteredDeals);\n    filteredStages.forEach(stage => (object[stage.id] = []));\n    console.log(\"object\", object);\n\n    if (filteredDeals !== undefined && filteredDeals.length > 0) {\n      filteredDeals.forEach((deal, key) => {\n        //console.log(\"deal.stageId\", deal.stageId);\n        //console.log(\"deal\", deal);\n        console.log(\"deal.stageId\", deal.stageId);\n        if (deal && deal.stageId)\n          object[deal.stageId].push(\n            <Card\n              hoverable\n              size=\"small\"\n              bordered={false}\n              onDragStart={event => onDragStart(event, deal.id)}\n              draggable\n              key={deal.id}\n              className=\"draggable2\"\n            >\n              <p className=\"detailsP\">\n                <span\n                  style={\n                    deal.stageId ===\n                    filteredStages.sort((a, b) => a.order - b.order)[\n                      filteredStages.length - 1\n                    ].id\n                      ? {\n                          color: `${topColors[topColors.length - 1]}`\n                        }\n                      : deal.stageId ===\n                        filteredStages.sort((a, b) => a.order - b.order)[0].id\n                      ? {\n                          color: `${topColors[0]}`\n                        }\n                      : {\n                          color: `${topColors[1]}`\n                        }\n                  }\n                >\n                  {deal.dealName}\n                </span>\n                <span className=\"userIconDraggable\">\n                  <UserOutlined />\n                </span>\n              </p>\n\n              <p>\n                {deal.orgId !== null &&\n                deal.orgId !== undefined &&\n                props.orgs.find(org => org.id === deal.orgId) ? (\n                  <span>\n                    {props.orgs.filter(org => org.id === deal.orgId)[0].orgName}\n                  </span>\n                ) : null}\n              </p>\n              <p>\n                <span className=\"footerSpan2\">\n                  ${\" \"}\n                  {!isNaN(parseInt(deal.dealValue))\n                    ? parseInt(deal.dealValue).toLocaleString()\n                    : 0}\n                </span>\n                <Button\n                  onClick={() => handleShowAct(deal.id)}\n                  className=\"actButton2\"\n                >\n                  {props.activities !== undefined &&\n                  props.activities !== null &&\n                  props.activities.length > 0 &&\n                  props.activities.find(\n                    act => act.dealId === deal.id && !act.isCompleted\n                  ) ? (\n                    props.activities.find(\n                      act =>\n                        act.dealId === deal.id &&\n                        !act.isCompleted &&\n                        isAfter(\n                          parseISO(act.activityDate),\n                          parseISO(todaysDate)\n                        )\n                    ) ? (\n                      <CalendarOutlined className=\"PBLightGreen\" />\n                    ) : activities.find(\n                        act =>\n                          act.dealId === deal.id &&\n                          !act.isCompleted &&\n                          isEqual(\n                            parseISO(act.activityDate),\n                            parseISO(todaysDate)\n                          )\n                      ) ? (\n                      <CalendarOutlined className=\"orange\" />\n                    ) : (\n                      <CalendarOutlined className=\"PBRed\" />\n                    )\n                  ) : (\n                    <CalendarOutlined className=\"PBYellow\" />\n                  )}\n                </Button>\n              </p>\n            </Card>\n          );\n      });\n    }\n    console.log(\"object\", object);\n    setDealsValue(sum);\n    setDNDDeals(object);\n\n    updateTargetsAndAchieved(teamId);\n  };\n\n  const handleShowAct = dealId => {\n    //console.log(\"dealId\", dealId);\n    let filteredacts = props.activities.filter(\n      act => act.dealId === dealId && !act.isCompleted\n    );\n    //console.log(\"filteredacts\", filteredacts);\n    let currentDeal = allDeals.find(deal => deal.id === dealId)\n      ? allDeals.filter(deal => deal.id === dealId)[0]\n      : {};\n    //console.log(\"currentDeal\", currentDeal);\n\n    setCurrentDealActs(filteredacts);\n    //setActShow(true);\n    setCurrentDeal(currentDeal);\n\n    //console.log(\"this.state.actShow\", this.state.actShow);\n  };\n\n  useEffect(() => {\n    setLoaded(true);\n  }, []);\n\n  const onChange = checked => {\n    console.log(`switch to ${checked}`);\n\n    setToggle(checked);\n  };\n\n  const topData = () => {\n    return (\n      <div>\n        <Row style={{ margin: \"0.5em 0 1em 0\" }}>\n          <Col span={24} style={{ textAlign: \"center\", display: \"block\" }}>\n            <h2\n              style={{\n                textAlign: \"center\",\n                padding: \"0.3em\",\n                fontSize: \"1.2em\"\n              }}\n            >\n              {toggle ? \" Pipelines Kanban View \" : \" Brief Explanation \"}{\" \"}\n              <Switch\n                size=\"small\"\n                style={{ padding: \"0.3em\" }}\n                defaultChecked\n                onChange={onChange}\n              />\n            </h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              {currentPipeDeals !== undefined &&\n              currentPipeDeals !== null &&\n              currentPipeDeals.length > 0\n                ? currentPipeDeals.length.toString()\n                : 0}{\" \"}\n              <small style={{ color: \"#19BAD1\" }}>Deal(s)</small>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              <small style={{ color: \"#19BAD1\" }}>Worth </small>{\" \"}\n              {!isNaN(dealsValue) ? parseInt(dealsValue).toLocaleString() : 0}\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              <small style={{ color: \"#19BAD1\" }}>To Win </small>{\" \"}\n              {selectedUserId !== 0 ? userQuota : teamQuota}\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              {selectedUserId !== 0 ? userAchieved : teamAchieved}{\" \"}\n              <small style={{ color: \"#19BAD1\" }}>Achieved </small>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              {selectedUserId !== 0\n                ? userQuota - userAchieved\n                : teamQuota - teamAchieved}{\" \"}\n              <small style={{ color: \"#19BAD1\" }}>Remaining </small>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              <small style={{ color: \"#19BAD1\" }}>Team Acheved </small>{\" \"}\n              {teamAchieved}\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              <Select\n                size=\"small\"\n                value={selectedPipeId}\n                onChange={selectPipe}\n                bordered={false}\n                suffixIcon={<FilterOutlined className=\"selectIcon\" />}\n              >\n                {props.pipelines\n                  .filter(pipe => pipe.teamId <= 3)\n                  .sort((a, b) => a.teamId - b.teamId)\n                  .map(p => (\n                    <Option key={p.id} value={p.id}>\n                      {p.pipeName}\n                    </Option>\n                  ))}\n              </Select>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardDeals\">\n              <Select\n                size=\"small\"\n                bordered={false}\n                value={selectedUserId}\n                onChange={handleSelectUser}\n                suffixIcon={<UserOutlined className=\"selectIcon\" />}\n              >\n                {props.usersByTeam !== undefined && props.usersByTeam.length > 0\n                  ? props.usersByTeam[selectedTeamId].map(user => (\n                      <Option value={user.id} id={user.id} key={user.id}>\n                        {user.nickName ? user.nickName : user.userName}\n                      </Option>\n                    ))\n                  : null}\n                <Option value={0} id={0} key={0}>\n                  All Users\n                </Option>\n              </Select>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Kanban2\">\n      {dataLoaded && topData()}\n      <div className=\"card-container\">\n        <Card bordered={false}>\n          {dataLoaded ? (\n            toggle ? (\n              <PipeView\n                currentMenu={props.currentMenu}\n                deals={props.deals}\n                activityTypes={props.activityTypes}\n                companyTypes={props.companyTypes}\n                contactTypes={props.contactTypes}\n                dealStatuses={props.dealStatuses}\n                reasons={props.reasons}\n                roles={props.roles}\n                teams={props.teams}\n                users={props.users}\n                targetTypes={props.targetTypes}\n                activities={props.activities}\n                allDeals={allDeals}\n                selectedTeamId={selectedTeamId}\n                selectedPipeId={selectedPipeId}\n                filteredStages={filteredStages}\n                currentPipeDeals={currentPipeDeals}\n                total={total}\n                selectedUserId={selectedUserId}\n                currentDealActs={currentDealActs}\n                currentDeal={currentDeal}\n                currentTeamTarget={currentTeamTarget}\n                currentUserTarget={currentUserTarget}\n                userQuota={userQuota}\n                userAchieved={userAchieved}\n                teamAchieved={teamAchieved}\n                teamQuota={teamQuota}\n                dealsValue={dealsValue}\n                dealsInDND={dealsInDND}\n                onDragStart={onDragStart}\n                onDragOver={onDragOver}\n                onDrop={onDrop}\n                topColors={topColors}\n              />\n            ) : (\n              <Explanation />\n            )\n          ) : null}\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Kanban2;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/PipeView.js",[],["134","135"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/OverviewStats.js",["136","137","138","139","140","141"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  Tabs,\n  Typography,\n  Spin,\n  Card,\n  Row,\n  Col,\n  Statistic,\n  Descriptions,\n  Divider,\n  Progress\n} from \"antd\";\n\nimport {\n  LoadingOutlined,\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  CheckCircleTwoTone,\n  BulbTwoTone,\n  HomeTwoTone,\n  DollarOutlined,\n  SmileTwoTone,\n  PhoneTwoTone,\n  MailTwoTone,\n  ThunderboltTwoTone,\n  DollarTwoTone,\n  FireTwoTone\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport \"./OverviewStats.css\";\n\nconst { TabPane } = Tabs;\nconst { Title } = Typography;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst OverviewStats = props => {\n  const [something, setSomething] = useState(props.something);\n  const [dataLoaded, setLoaded] = useState(true);\n\n  const callback = key => {\n    console.log(key);\n  };\n\n  useEffect(() => {\n    setSomething(something);\n  }, [something]);\n\n  const stats = type => {\n    if (type === \"today\") {\n      return (\n        <div className=\"OverviewStats\">\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col span={16}>\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col span={12}>\n                  <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col span={24}>\n                      <Card className=\"majorStatCard\">20 Activities</Card>\n                    </Col>\n                    <Divider>across</Divider>\n                    <Col span={24}>\n                      <Card className=\"majorStatCard\">8 Deals</Card>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col span={12}>\n                  <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">5 Demos</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">1 Meeting(s)</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">8 Calls</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">4 Emails</Card>\n                    </Col>\n                    <Col span={24}>\n                      <Card className=\"minorStatCard\">2 Others</Card>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Achieved\" className=\"statsCard\">\n                <Progress\n                  strokeColor={{\n                    from: \"#108ee9\",\n                    to: \"#87d068\"\n                  }}\n                  status=\"active\"\n                  percent={62}\n                />\n                <br />\n                <br />\n                <span className=\"statsCardSpan\">Quota $1000</span>\n                <br />\n                <br />\n                <span className=\"statsCardSpan\">8 Deals Won</span>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col span={24}>\n              <Card className=\"firstActCard\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col span={24}>\n                    <span className=\"FACtitleSpan\">\n                      Call XYZ from ABS @ 09:30 for 10 minutes regarding Final\n                      Closure\n                    </span>\n                    <span className=\"FACInfoSpan\">1 of 20</span>\n                  </Col>\n                </Row>\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col span={8}>\n                    <Card title=\"ABS Deal\" className=\"FACSpecifics\">\n                      <DollarTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 1,000\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 3 Demos\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 7 Calls\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 15 Emails\n                      <br />\n                    </Card>\n                  </Col>\n                  <Col span={8}>\n                    <Card title=\"ABS Corporation\" className=\"FACSpecifics\">\n                      <HomeTwoTone />\n                      <span className=\"emptySpan\" /> California\n                      <br />\n                      <BulbTwoTone />\n                      <span className=\"emptySpan\" /> Software Development\n                      <br />\n                      <DollarTwoTone />\n                      <span className=\"emptySpan\" /> 10M Annual Revenue\n                      <br />\n                      <SmileTwoTone />\n                      <span className=\"emptySpan\" /> 500 Employees\n                      <br />\n                    </Card>\n                  </Col>\n                  <Col span={8}>\n                    <Card title=\"XYZ\" className=\"FACSpecifics\">\n                      <FireTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> Influencer\n                      <br />\n                      <PhoneTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> +1 345 232 2345\n                      <br />\n                      <MailTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" />{\" \"}\n                      <a\n                        href={`mailto:xyz@abs.com`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        xyz@abs.com\n                      </a>\n                      <br />\n                      <ThunderboltTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> 12 Interactions\n                      <br />\n                    </Card>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className=\"site-layout-background\"\n      style={{ padding: 24, textAlign: \"center\" }}\n    >\n      <Title level={4}>Hey, Anwin. This is how your day looks like.</Title>\n      <Spin tip=\"Loading...\" indicator={antIcon} spinning={!dataLoaded}>\n        <Tabs className=\"mainAppTabs\" onChange={callback} type=\"card\">\n          <TabPane tab=\"Today\" key=\"1\">\n            {stats(\"today\")}\n          </TabPane>\n          <TabPane tab=\"Tomorrow\" key=\"2\">\n            Content of Tab Pane 2\n          </TabPane>\n          <TabPane tab=\"This Week\" key=\"3\">\n            Content of Tab Pane 3\n          </TabPane>\n        </Tabs>\n      </Spin>\n    </div>\n  );\n};\n\nexport default OverviewStats;\n",["142","143"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/OtherActs.js",["144"],"import React, { useState } from \"react\";\n\nimport { Card, Row, Col } from \"antd\";\n\nimport {\n  PhoneTwoTone,\n  MailTwoTone,\n  LaptopOutlined,\n  CustomerServiceTwoTone,\n  MobileTwoTone,\n  PushpinTwoTone,\n  CoffeeOutlined,\n  ClockCircleTwoTone\n} from \"@ant-design/icons\";\n\nimport { parseISO, format } from \"date-fns\";\n\n//import axios from \"axios\";\n\nimport \"../../Activities.css\";\n\nconst taskIcons = [\n  <PhoneTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <MobileTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <MailTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <CustomerServiceTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <LaptopOutlined twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <PushpinTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <CoffeeOutlined twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />\n];\n\nconst OtherActs = props => {\n  const tabList = [\n    {\n      key: \"today\",\n      tab: `Today ( ${\n        props.allTodayActs !== undefined && props.allTodayActs.length > 0\n          ? props.allTodayActs.length\n          : 0\n      } )`\n    },\n    {\n      key: \"past\",\n      tab: `Past ( ${\n        props.allPastActs !== undefined && props.allPastActs.length > 0\n          ? props.allPastActs.length\n          : 0\n      } )`\n    },\n    {\n      key: \"future\",\n      tab: `Future ( ${\n        props.allFutureActs !== undefined && props.allFutureActs.length > 0\n          ? props.allFutureActs.length\n          : 0\n      } )`\n    }\n  ];\n\n  const contentList = {\n    today: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allTodayActs !== undefined && props.allTodayActs.length > 0 ? (\n          props.allTodayActs.map(a => (\n            <div key={a.id}>\n              <Row>\n                <Col span={3}>\n                  {props.activityTypes !== undefined &&\n                  props.activityTypes.length > 0 &&\n                  props.activityTypes.find(at => at.id === a.activityTypeId)\n                    ? props.activityTypes.filter(\n                        at => at.id === a.activityTypeId\n                      )[0].activityTypeSlug\n                    : \"---\"}\n                </Col>\n                <Col span={21}>\n                  <Row>\n                    <Col>Title</Col>\n                    <Col>With</Col>\n                    <Col>Time</Col>\n                    <Col>Duration</Col>\n                  </Row>\n                </Col>\n              </Row>\n            </div>\n          ))\n        ) : (\n          <p>No Tasks scheduled for today</p>\n        )}\n      </Card>\n    ),\n    past: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allPastActs !== undefined && props.allPastActs.length > 0 ? (\n          props.allPastActs.map(a => (\n            <Card\n              key={a.id}\n              className={\n                props.activity.id === a.id\n                  ? \"OACIActive OtherActsCardItems\"\n                  : \"OtherActsCardItems\"\n              }\n              size=\"small\"\n              bordered={false}\n            >\n              <Row>\n                <Col span={3}>\n                  <p className=\"slugP\">\n                    <>\n                      {props.activityTypes !== undefined &&\n                      props.activityTypes.length > 0 &&\n                      props.activityTypes.find(\n                        at => at.id === a.activityTypeId\n                      ) ? (\n                        <i\n                          className={\n                            props.activityTypes.filter(\n                              at => at.id === a.activityTypeId\n                            )[0].activityTypeSlug\n                          }\n                          style={{ color: \"#19BAD1\" }}\n                        />\n                      ) : (\n                        \"---\"\n                      )}\n                    </>\n                    {/*<PhoneTwoTone twoToneColor=\"#19BAD1\" />*/}\n                  </p>\n                </Col>\n                <Col span={14}>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"titleP\">{a.activityTitle}</p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"dealP\">\n                        {props.allDeals !== undefined &&\n                        props.allDeals.length > 0 &&\n                        a.dealId &&\n                        props.allDeals.find(d => d.id === a.dealId)\n                          ? props.allDeals.filter(d => d.id === a.dealId)[0]\n                              .dealName\n                          : \"---\"}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"withP\">\n                        {props.people !== undefined &&\n                        props.people.length > 0 &&\n                        props.people.find(p => p.id === a.contactId)\n                          ? props.people.filter(p => p.id === a.contactId)[0]\n                              .contactName\n                          : \"---\"}\n                        {\" | \"}\n                        {props.orgs !== undefined &&\n                        props.orgs.length > 0 &&\n                        props.orgs.find(o => o.id === a.orgId)\n                          ? props.orgs.filter(o => o.id === a.orgId)[0].orgName\n                          : \"---\"}\n                      </p>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col span={7}>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"timeP\">\n                        <ClockCircleTwoTone twoToneColor=\"#fa4a09\" />{\" \"}\n                        {a.activityDate\n                          ? format(parseISO(a.activityDate), \"dd MMM yyyy\")\n                          : \"---\"}\n                      </p>\n                    </Col>\n                    <Col span={24}>\n                      <p className=\"timeP\">\n                        {a.duration ? a.duration + \" minutes\" : \"--\"}\n                      </p>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Card>\n          ))\n        ) : (\n          <p>No Open tasks from the past</p>\n        )}\n      </Card>\n    ),\n    future: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allFutureActs !== undefined && props.allFutureActs.length > 0 ? (\n          props.allFutureActs.map(a => (\n            <Card\n              key={a.id}\n              className=\"OtherActsCardItems\"\n              size=\"small\"\n              bordered={false}\n            >\n              <Row>\n                <Col span={3}>\n                  {props.activityTypes !== undefined &&\n                  props.activityTypes.length > 0 &&\n                  props.activityTypes.find(at => at.id === a.activityTypeId) ? (\n                    <>\n                      props.activityTypes.filter( at => at.id ===\n                      a.activityTypeId )[0].activityTypeSlug\n                    </>\n                  ) : (\n                    \"---\"\n                  )}\n                </Col>\n                <Col span={21}>\n                  <Row>\n                    <Col>Title</Col>\n                    <Col>With</Col>\n                    <Col>Time</Col>\n                    <Col>Duration</Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Card>\n          ))\n        ) : (\n          <p>No Scheduled Tasks</p>\n        )}\n      </Card>\n    )\n  };\n\n  const [tabState, setTabState] = useState({\n    key:\n      props.allTodayActs !== undefined && props.allTodayActs.length > 0\n        ? \"today\"\n        : \"past\"\n  });\n\n  const onTabChange = (key, type) => {\n    console.log(key, type);\n    setTabState({ [type]: key });\n  };\n\n  return (\n    <div className=\"OtherActs\">\n      <Card\n        style={{ width: \"100%\", textAlign: \"center\" }}\n        tabList={tabList}\n        activeTabKey={tabState.key}\n        onTabChange={key => {\n          onTabChange(key, \"key\");\n        }}\n        size=\"small\"\n        className=\"OtherActsMainCard\"\n      >\n        {contentList[tabState.key]}\n      </Card>\n    </div>\n  );\n};\n\nexport default OtherActs;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Inbox.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  Button,\n  Row,\n  Col,\n  Card,\n  Tabs,\n  Select,\n  Input,\n  Checkbox,\n  Avatar,\n  Tooltip,\n  Drawer\n} from \"antd\";\n\nimport {\n  format,\n  sub,\n  parseISO,\n  isFuture,\n  isPast\n  //isToday,\n  //isTomorrow,\n  //isThisWeek,\n  //isSameWeek,\n  //addDays\n} from \"date-fns\";\n\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\n\nimport { Editor } from \"react-draft-wysiwyg\";\n\nimport {\n  CheckOutlined,\n  SmileTwoTone,\n  MehTwoTone,\n  PhoneTwoTone,\n  UserOutlined\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport { isEmpty } from \"../../../../../libs/validators\";\n\nimport InboxHeader from \"./InboxComps/InboxHeader\";\nimport OtherActs from \"./InboxComps/OtherActs\";\n\n//import ButtonPB from \"../../../components/ButtonPB\";\n\nimport \"../Activities.css\";\n//import \"../../../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst toolbarOptions = require(\"./Editor/toolbarOptions.json\").data;\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst Inbox = props => {\n  const [dataLoaded, setLoaded] = useState(false);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [changeUser, setChangeUser] = useState(false);\n  const [showDealType, setShowDealType] = useState(false);\n  const [showChangeDetails, setChangeDetails] = useState(false);\n  const [currentAct, setCurrentAct] = useState({});\n  const [currentActFlag, setCurrentActFlag] = useState(false);\n\n  const [noActsToday, setNoActsToday] = useState(\n    props.noActivitiesToday || false\n  );\n  const [dealType, setDealType] = useState(1);\n  const [noActsPast, setNoActsPast] = useState(props.noPastActivities || false);\n  const [allTodayActs, setTodayActs] = useState([]);\n  const [allPastActs, setPastActs] = useState([]);\n  const [allFutureActs, setFutureActs] = useState([]);\n  const [localEditorState, setEditorState] = useState(\n    EditorState.createEmpty()\n  );\n  const [filteredUserAct, setFilteredUserAct] = useState(\n    props.processedActs.filter(ua => ua.userId === props.userId)[0]\n  );\n  const [selectedActId, setSelectedActId] = useState(null);\n  /*\n  useEffect(() => {\n    setFilteredUserAct(\n      props.processedActs.filter(ua => ua.userId === props.userId)[0]\n    );\n  }, [props.processedActs, props.userId]);\n*/\n  //console.log(\"filteredUserAct\", filteredUserAct);\n  //console.log(\"props.processedActs\", props.processedActs);\n  const selectActId = actId => {\n    setSelectedActId(parseInt(actId));\n  };\n\n  useEffect(() => {\n    if (\n      selectedActId !== null &&\n      selectedActId !== undefined &&\n      parseInt(selectedActId) > 0\n    ) {\n      if (\n        filteredUserAct !== undefined &&\n        !isEmpty(props.processedActs) &&\n        filteredUserAct.openUserActs !== undefined &&\n        filteredUserAct.openUserActs.length > 0 &&\n        filteredUserAct.openUserActs.find(a => a.id === selectedActId)\n      ) {\n        setCurrentAct(\n          filteredUserAct.openUserActs.filter(a => a.id === selectedActId)[0]\n        );\n        setCurrentActFlag(true);\n        //allTodayActivities = allTodayActs;\n        //allPastActivities = allPastActs;\n        //allFutureActivities = allFutureActs;\n      }\n    } else {\n      if (\n        filteredUserAct &&\n        !isEmpty(props.processedActs) &&\n        filteredUserAct.openUserActs !== undefined &&\n        filteredUserAct.openUserActs.length > 0 &&\n        filteredUserAct.openUserActs.find(\n          a =>\n            format(\n              sub(parseISO(a.activityDate), {\n                years: 0,\n                months: 0,\n                weeks: 0,\n                days: 0,\n                hours: 4 + props.dst,\n                minutes: 30,\n                seconds: 0\n              }),\n              \"yyyy-MM-dd\"\n            ) === props.today\n        )\n      ) {\n        console.log(\"if happened\");\n        /*\n        allTodayActivities = getAllTodayActs(userActivity);\n        console.log(\"allTodayActivities\", allTodayActivities);\n\n        allPastActivities = getAllPastActs(userActivity);\n        console.log(\"allPastActivities\", allPastActivities);\n\n        allFutureActivities = getAllFutureActs(userActivity);\n        console.log(\"allFutureActivities\", allFutureActivities);\n*/\n        setCurrentAct(\n          filteredUserAct.openUserActs\n            .filter(\n              a =>\n                format(\n                  sub(parseISO(a.activityDate), {\n                    years: 0,\n                    months: 0,\n                    weeks: 0,\n                    days: 0,\n                    hours: 4 + props.dst,\n                    minutes: 30,\n                    seconds: 0\n                  }),\n                  \"yyyy-MM-dd\"\n                ) === props.today\n            )\n            .sort(\n              (a, b) => new Date(a.activityDate) - new Date(b.activityDate)\n            )[0]\n        );\n        setCurrentActFlag(true);\n        setNoActsToday(false);\n        //noActivitiesToday = false;\n      } else if (\n        filteredUserAct !== undefined &&\n        !isEmpty(filteredUserAct) &&\n        filteredUserAct.openUserActs !== undefined &&\n        filteredUserAct.openUserActs.length > 0\n      ) {\n        console.log(\"else if happened\");\n        setCurrentAct(\n          filteredUserAct.openUserActs.sort(\n            (a, b) => new Date(a.activityDate) - new Date(b.activityDate)\n          )[0]\n        );\n        setCurrentActFlag(true);\n        setNoActsToday(true);\n        /*\n        noActivitiesToday = true;\n\n        allTodayActivities = getAllTodayActs(userActivity);\n        console.log(\"allTodayActivities\", allTodayActivities);\n\n        allPastActivities = getAllPastActs(userActivity);\n        console.log(\"allPastActivities\", allPastActivities);\n\n        allFutureActivities = getAllFutureActs(userActivity);\n        console.log(\"allFutureActivities\", allFutureActivities);\n        */\n      }\n    }\n\n    setTodayActs(\n      filteredUserAct.openUserActs.filter(\n        a =>\n          format(\n            sub(parseISO(a.activityDate), {\n              years: 0,\n              months: 0,\n              weeks: 0,\n              days: 0,\n              hours: 4 + props.dst,\n              minutes: 30,\n              seconds: 0\n            }),\n            \"yyyy-MM-dd\"\n          ) === props.today\n      )\n    );\n\n    setPastActs(\n      filteredUserAct.openUserActs.filter(\n        a =>\n          isPast(\n            sub(parseISO(a.activityDate), {\n              years: 0,\n              months: 0,\n              weeks: 0,\n              days: 0,\n              hours: 4 + props.dst,\n              minutes: 30,\n              seconds: 0\n            }),\n            \"yyyy-MM-dd\"\n          ) &&\n          format(\n            sub(parseISO(a.activityDate), {\n              years: 0,\n              months: 0,\n              weeks: 0,\n              days: 0,\n              hours: 4 + props.dst,\n              minutes: 30,\n              seconds: 0\n            }),\n            \"yyyy-MM-dd\"\n          ) !== props.today\n      )\n    );\n\n    setFutureActs(\n      filteredUserAct.openUserActs.filter(\n        a =>\n          isFuture(\n            sub(parseISO(a.activityDate), {\n              years: 0,\n              months: 0,\n              weeks: 0,\n              days: 0,\n              hours: 4 + props.dst,\n              minutes: 30,\n              seconds: 0\n            }),\n            \"yyyy-MM-dd\"\n          ) &&\n          format(\n            sub(parseISO(a.activityDate), {\n              years: 0,\n              months: 0,\n              weeks: 0,\n              days: 0,\n              hours: 4 + props.dst,\n              minutes: 30,\n              seconds: 0\n            }),\n            \"yyyy-MM-dd\"\n          ) !== props.today\n      )\n    );\n\n    if (\n      filteredUserAct.openUserActs.find(\n        a => isPast(parseISO(a.activityDate)) && !a.isCompleted\n      )\n    ) {\n      console.log(\"if happened\");\n      //noPastActivities = false;\n      setNoActsPast(false);\n    } else {\n      console.log(\"else if happened\");\n      //noPastActivities = true;\n      setNoActsPast(true);\n    }\n  }, [filteredUserAct, selectedActId]);\n\n  useEffect(() => {\n    if (currentActFlag) {\n      console.log(\"currentAct\", currentAct);\n      //console.log(\"currentAct.content\", currentAct.content);\n      setEditorState(\n        EditorState.createWithContent(\n          convertFromRaw(JSON.parse(currentAct.content))\n        )\n      );\n\n      if (currentAct !== undefined && !isEmpty(currentAct)) {\n        if (currentAct.hasOwnProperty(\"dealId\")) {\n          setDealType(1);\n        } else if (currentAct.hasOwnProperty(\"rDealId\")) {\n          setDealType(3);\n        } else if (currentAct.hasOwnProperty(\"customerId\")) {\n          setDealType(2);\n        }\n      }\n      //console.log(\"dealType\", dealType);\n\n      setLoaded(true);\n    }\n  }, [currentAct, currentActFlag]);\n\n  const onEditorStateChange = editorState => {\n    setEditorState(editorState);\n  };\n\n  const saveEditorContent = data => {\n    localStorage.setItem(\"editorData\", JSON.stringify(data));\n  };\n\n  const getSavedEditorData = () => {\n    const savedData = localStorage.getItem(\"editorData\");\n\n    return savedData ? JSON.parse(savedData) : null;\n  };\n\n  const renderContentAsRawJs = () => {\n    const contentState = localEditorState.getCurrentContent();\n    const raw = convertToRaw(contentState);\n\n    return JSON.stringify(raw, null, 2);\n  };\n\n  const handleChange = e => {\n    console.log(\"e\", e);\n    setCurrentAct({\n      ...currentAct,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const changeDealDetails = () => {\n    return (\n      <React.Fragment>\n        <Row>\n          <Col span={2}>\n            <i\n              className=\"far fa-clipboard\"\n              onDoubleClick={() => setChangeDetails(!showChangeDetails)}\n              style={{ cursor: \"pointer\", color: \"#19BAD1\" }}\n            />\n          </Col>\n          <Col span={20}>\n            <Select\n              name=\"dealId\"\n              value={currentAct.dealId}\n              onChange={e => {\n                let dealId = parseInt(e);\n                let deal = props.allDeals.filter(d => d.id === dealId)[0];\n                //console.log(\"deal\", deal);\n                setCurrentAct({\n                  ...currentAct,\n                  dealId: dealId,\n                  orgId: deal.orgId,\n                  contactId: deal.contactId\n                });\n              }}\n            >\n              {props.allDeals !== undefined && props.allDeals.length > 0 ? (\n                props.allDeals.map(d => (\n                  <Option value={d.id} key={d.id}>\n                    {d.dealName}\n                  </Option>\n                ))\n              ) : (\n                <Option disabled value={0}>\n                  Unable to retrieve Deals\n                </Option>\n              )}\n            </Select>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col span={2}>\n            <i className=\"fas fa-building\" style={{ color: \"#19BAD1\" }} />\n          </Col>\n          <Col span={20}>\n            <Select name=\"orgId\" value={currentAct.orgId} disabled>\n              {props.orgs !== undefined && props.orgs.length > 0 ? (\n                props.orgs.map(d => (\n                  <Option value={d.id} key={d.id}>\n                    {d.orgName}\n                  </Option>\n                ))\n              ) : (\n                <Option disabled value={0}>\n                  Unable to retrieve Orgs\n                </Option>\n              )}\n            </Select>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col span={2}>\n            <i className=\"fas fa-user\" style={{ color: \"#19BAD1\" }} />\n          </Col>\n          <Col span={20}>\n            <Select\n              name=\"contactId\"\n              value={currentAct.contactId}\n              onChange={e => {\n                setCurrentAct({\n                  ...currentAct,\n                  contactId: parseInt(e)\n                });\n              }}\n              onBlur={() => setChangeDetails(false)}\n            >\n              {props.people !== undefined && props.people.length > 0 ? (\n                props.people\n                  .filter(p => p.orgId === currentAct.orgId)\n                  .map(p => (\n                    <Option value={p.id} key={p.id}>\n                      {p.contactName}\n                    </Option>\n                  ))\n              ) : (\n                <Option disabled value={0}>\n                  Unable to retrieve Deals\n                </Option>\n              )}\n            </Select>\n          </Col>\n        </Row>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <Card\n      className=\"Inbox\"\n      style={{ padding: \"1px\", margin: 0, textAlign: \"center\" }}\n      bordered={false}\n    >\n      <div className=\"card-container\">\n        {dataLoaded && (\n          <InboxHeader\n            activity={currentAct}\n            activityTypes={props.activityTypes}\n            orgs={props.orgs}\n            people={props.people}\n          />\n        )}\n        <br />\n        <Row gutter={8}>\n          <Col span={openDrawer ? 6 : 8}>\n            {dataLoaded && (\n              <Card className=\"InboxSideCard\">\n                {!changeUser ? (\n                  <Row>\n                    <Col span={2}>\n                      <i\n                        className=\"fas fa-user-tie\"\n                        style={{ color: \"#19BAD1\" }}\n                      />\n                    </Col>\n                    <Col span={6}>Owner</Col>\n                    <Col span={16}>\n                      {props.users !== undefined &&\n                      props.users.length > 0 &&\n                      currentAct &&\n                      currentAct.userId &&\n                      props.users.find(u => u.id === currentAct.userId) ? (\n                        props.users.filter(u => u.id === currentAct.userId)[0]\n                          .userAvatar ? (\n                          <Tooltip\n                            title={\n                              props.users.filter(\n                                u => u.id === currentAct.userId\n                              )[0].userName\n                            }\n                            placement=\"right\"\n                            color=\"cyan\"\n                          >\n                            <Avatar\n                              src={\n                                props.users.filter(\n                                  u => u.id === currentAct.userId\n                                )[0].userAvatar\n                              }\n                              onDoubleClick={e => setChangeUser(true)}\n                              style={{ cursor: \"pointer\" }}\n                            />\n                          </Tooltip>\n                        ) : (\n                          <Tooltip\n                            title={\n                              props.users.filter(\n                                u => u.id === currentAct.userId\n                              )[0].userName\n                            }\n                            placement=\"right\"\n                            color=\"cyan\"\n                          >\n                            {\n                              props.users.filter(\n                                u => u.id === currentAct.userId\n                              )[0].userName\n                            }\n                          </Tooltip>\n                        )\n                      ) : (\n                        <span\n                          onDoubleClick={e => setChangeUser(true)}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          User Unassigned\n                        </span>\n                      )}\n                    </Col>\n                  </Row>\n                ) : (\n                  <Row>\n                    <Col span={2}>\n                      <i\n                        className=\"fas fa-user-tie\"\n                        style={{ color: \"#19BAD1\" }}\n                      />\n                    </Col>\n                    <Col span={6}> Owner</Col>\n                    <Col span={16}>\n                      <Select\n                        name=\"userId\"\n                        value={currentAct.userId}\n                        style={{ width: 120 }}\n                        onChange={e =>\n                          setCurrentAct({\n                            ...currentAct,\n                            userId: parseInt(e)\n                          })\n                        }\n                        onBlur={e => setChangeUser(false)}\n                      >\n                        {props.users !== undefined && props.users.length > 0 ? (\n                          props.users.map(u => (\n                            <Option value={u.id} key={u.id}>\n                              {u.userName}\n                            </Option>\n                          ))\n                        ) : (\n                          <Option disabled value={0}>\n                            Unable to retrieve users\n                          </Option>\n                        )}\n                      </Select>\n                    </Col>\n                  </Row>\n                )}\n                <br />\n                {!showChangeDetails ? (\n                  <React.Fragment>\n                    <Row>\n                      <Col span={2}>\n                        <i\n                          className=\"far fa-clipboard\"\n                          onDoubleClick={() =>\n                            setChangeDetails(!showChangeDetails)\n                          }\n                          style={{ cursor: \"pointer\", color: \"#19BAD1\" }}\n                        />\n                      </Col>\n                      <Col>\n                        {dealType !== undefined ? (\n                          dealType === 1 &&\n                          props.allDeals !== undefined &&\n                          props.allDeals.length > 0 &&\n                          currentAct.dealId !== undefined &&\n                          props.allDeals.find(\n                            d => d.id === currentAct.dealId\n                          ) ? (\n                            <span>\n                              {\n                                props.allDeals.filter(\n                                  d => d.id === currentAct.dealId\n                                )[0].dealName\n                              }\n                            </span>\n                          ) : dealType === 3 &&\n                            props.rDeals !== undefined &&\n                            props.rDeals.length > 0 &&\n                            currentAct.rDealId !== undefined &&\n                            props.rDeals.find(\n                              d => d.id === currentAct.rDealId\n                            ) ? (\n                            <span>\n                              {\n                                props.rDeals.filter(\n                                  d => d.id === currentAct.rDealId\n                                )[0].dealName\n                              }\n                            </span>\n                          ) : dealType === 2 &&\n                            props.customers !== undefined &&\n                            props.customers.length > 0 &&\n                            currentAct.customerId !== undefined &&\n                            props.customers.find(\n                              d => d.id === currentAct.customerId\n                            ) ? (\n                            <span>\n                              {\n                                props.customers.filter(\n                                  d => d.id === currentAct.customerId\n                                )[0].customerName\n                              }\n                            </span>\n                          ) : (\n                            \"Unconnected Record\"\n                          )\n                        ) : (\n                          \"Unconnected Record\"\n                        )}\n                      </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                      <Col span={2}>\n                        <i\n                          className=\"fas fa-building\"\n                          style={{ cursor: \"pointer\", color: \"#19BAD1\" }}\n                        />\n                      </Col>\n                      <Col>\n                        {props.orgs !== undefined &&\n                        props.orgs.length > 0 &&\n                        currentAct.orgId !== undefined &&\n                        currentAct.orgId !== null &&\n                        props.orgs.find(o => o.id === currentAct.orgId) ? (\n                          <span>\n                            {\n                              props.orgs.filter(\n                                o => o.id === currentAct.orgId\n                              )[0].orgName\n                            }\n                          </span>\n                        ) : (\n                          \"Org - Unconnected\"\n                        )}\n                      </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                      <Col span={2}>\n                        <i\n                          className=\"fas fa-user\"\n                          style={{ cursor: \"pointer\", color: \"#19BAD1\" }}\n                        />\n                      </Col>\n                      <Col>\n                        {props.people !== undefined &&\n                        props.people.length > 0 &&\n                        currentAct.contactId !== undefined &&\n                        currentAct.contactId !== null &&\n                        props.people.find(\n                          c => c.id === currentAct.contactId\n                        ) ? (\n                          <span>\n                            {\n                              props.people.filter(\n                                c => c.id === currentAct.contactId\n                              )[0].contactName\n                            }\n                          </span>\n                        ) : (\n                          \"Contact - Unconnected\"\n                        )}\n                      </Col>\n                    </Row>\n                  </React.Fragment>\n                ) : (\n                  changeDealDetails()\n                )}\n              </Card>\n            )}\n          </Col>\n          <Col span={openDrawer ? 10 : 15}>\n            {dataLoaded && (\n              <Card className=\"InboxMidCard\">\n                <Row>\n                  <Col span={8}>Status</Col>\n                  <Col span={16}>\n                    <Checkbox\n                      checked={currentAct.isCompleted}\n                      onChange={() =>\n                        setCurrentAct({\n                          ...currentAct,\n                          isCompleted: !currentAct.isCompleted\n                        })\n                      }\n                    >\n                      {currentAct.isCompleted ? \"Completed\" : \"Ongoing\"}\n                    </Checkbox>\n                  </Col>\n                </Row>\n                <br />\n                {currentAct.isCompleted ? (\n                  <React.Fragment>\n                    <Row>\n                      <Col span={8}>Activity Result</Col>\n                      <Col span={16}>\n                        <Checkbox\n                          checked={currentAct.success}\n                          onChange={() =>\n                            setCurrentAct({\n                              ...currentAct,\n                              success: !currentAct.success\n                            })\n                          }\n                        >\n                          {currentAct.success ? \"Success\" : \"Fail\"}\n                        </Checkbox>\n                      </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                      <Col span={8}>\n                        {currentAct.success\n                          ? \"Success note (optional)\"\n                          : \"Fail note (optional)\"}\n                      </Col>\n                      <Col span={16}>\n                        <Input\n                          name=\"text\"\n                          size=\"small\"\n                          placeholder={\"Quick note\"}\n                          onChange={e =>\n                            setCurrentAct({\n                              ...currentAct,\n                              text: e.target.value\n                            })\n                          }\n                          style={{ marginBottom: \"5px\" }}\n                          value={currentAct.text}\n                        />\n                      </Col>\n                    </Row>\n                    <br />\n                  </React.Fragment>\n                ) : null}\n                <Row>\n                  <Col span={8}>Title</Col>\n                  <Col span={16}>\n                    <Input\n                      name=\"activityTitle\"\n                      size=\"small\"\n                      placeholder=\"Enter Title\"\n                      onChange={e =>\n                        setCurrentAct({\n                          ...currentAct,\n                          activityTitle: e.target.value\n                        })\n                      }\n                      style={{ marginBottom: \"5px\" }}\n                      value={currentAct.activityTitle}\n                    />\n                  </Col>\n                </Row>\n                <br />\n                <div>\n                  <Editor\n                    toolbar={toolbarOptions}\n                    editorState={localEditorState}\n                    wrapperClassName=\"demo-wrapper\"\n                    editorClassName=\"demo-editor\"\n                    onEditorStateChange={onEditorStateChange}\n                  />\n                  {/*<textarea\n                  disabled\n                  value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n                />*/}\n                </div>\n                <br />\n                <Row>\n                  <Col span={8} />\n                  <Col span={8}>\n                    <Button\n                      type=\"primary\"\n                      block={true}\n                      loading={false}\n                      size=\"medium\"\n                    >\n                      Update Activity\n                    </Button>\n                  </Col>\n                  <Col span={8} />\n                </Row>\n              </Card>\n            )}\n          </Col>\n          {dataLoaded && !openDrawer ? (\n            <Col span={1}>\n              <i\n                className=\"fas fa-chevron-left openDrawerSpan\"\n                onClick={() => setOpenDrawer(true)}\n              />\n            </Col>\n          ) : (\n            <Drawer\n              className=\"InboxMainCard\"\n              title={\n                <Row>\n                  <Col span={24}>All Activities</Col>\n                </Row>\n              }\n              placement=\"right\"\n              closable={true}\n              onClose={() => setOpenDrawer(false)}\n              visible={openDrawer}\n              width={\"40vw\"}\n            >\n              <OtherActs\n                activityTypes={props.activityTypes}\n                orgs={props.orgs}\n                people={props.people}\n                allTodayActs={allTodayActs}\n                allPastActs={allPastActs}\n                allFutureActs={allFutureActs}\n                allDeals={props.allDeals}\n                activity={currentAct}\n              />\n            </Drawer>\n          )}\n        </Row>\n      </div>\n    </Card>\n  );\n};\n\nexport default Inbox;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/AllActivities.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Tasks.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/InboxHeader.js",["162","163","164","165","166"],"import React from \"react\";\n\nimport { Row, Col, Card } from \"antd\";\n\nimport { format, parseISO, isPast, sub } from \"date-fns\";\n\nimport {\n  CheckOutlined,\n  SmileTwoTone,\n  MehTwoTone,\n  PhoneTwoTone,\n  ClockCircleTwoTone\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport \"../../Activities.css\";\n\nconst InboxHeader = props => {\n  return (\n    <Row className=\"InboxHeaderRow\">\n      <Col span={!props.activity.isCompleted ? 2 : 1}>\n        <Card\n          size=\"small\"\n          className=\"statsCardIT\"\n          style={{ borderRadius: \"2px 0 0 2px\" }}\n        >\n          {props.activityTypes !== undefined &&\n          props.activityTypes.length > 0 &&\n          props.activityTypes.find(\n            at => at.id === props.activity.activityTypeId\n          ) ? (\n            <i\n              className={\n                props.activityTypes.filter(\n                  at => at.id === props.activity.activityTypeId\n                )[0].activityTypeSlug\n              }\n            />\n          ) : (\n            \"---\"\n          )}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 9 : 6}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          With{\" \"}\n          {props.people !== undefined &&\n          props.people.length > 0 &&\n          props.activity.contactId !== undefined &&\n          props.activity.contactId !== null &&\n          props.people.find(c => c.id === props.activity.contactId)\n            ? props.people.filter(c => c.id === props.activity.contactId)[0]\n                .contactName\n            : \" N/A\"}{\" \"}\n          from{\" \"}\n          {props.orgs !== undefined &&\n          props.orgs.length > 0 &&\n          props.activity.orgId !== undefined &&\n          props.activity.orgId !== null &&\n          props.orgs.find(o => o.id === props.activity.orgId)\n            ? props.orgs.filter(o => o.id === props.activity.orgId)[0].orgName\n            : \" N/A\"}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 5 : 4}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          <i\n            className=\"far fa-clock\"\n            style={\n              isPast(\n                sub(parseISO(props.activity.activityDate), {\n                  years: 0,\n                  months: 0,\n                  weeks: 0,\n                  days: 0,\n                  hours: 4 + props.dst,\n                  minutes: 30,\n                  seconds: 0\n                })\n              )\n                ? {\n                    cursor: \"pointer\",\n                    fontSize: \"16px\",\n                    color: \"#FF2929\"\n                  }\n                : {\n                    cursor: \"pointer\",\n                    fontSize: \"16px\",\n                    color: \"#19BAD1\"\n                  }\n            }\n          />{\" \"}\n          {format(parseISO(props.activity.activityDate), \"dd-MMM\").toString()}{\" \"}\n          {\" - \"}\n          {props.activity.activityTime\n            ? props.activity.activityTime.split(\":\")[0]\n            : \"--\"}\n          {\":\"}\n          {props.activity.activityTime\n            ? props.activity.activityTime.split(\":\")[1]\n            : \"--\"}\n          {props.activity.activityTime &&\n          parseInt(props.activity.activityTime.split(\":\")[0]) > 11\n            ? \" PM\"\n            : \" AM\"}{\" \"}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 4 : 3}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          {props.activity.duration} minutes\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 4 : 3}>\n        <Card\n          size=\"small\"\n          className=\"statsCardIT\"\n          style={\n            !props.activity.isCompleted ? { borderRadius: \"0 2px 2px 0\" } : null\n          }\n        >\n          {props.activity.isCompleted ? (\n            <i\n              className=\"fas fa-check\"\n              style={{ fontSize: \"16px\", color: \"#92F0AE\" }}\n            />\n          ) : (\n            \"Ongoing\"\n          )}\n        </Card>\n      </Col>\n      {props.activity.isCompleted ? (\n        <React.Fragment>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardIT\">\n              {props.activity.success ? (\n                <i\n                  className=\"far fa-grin-beam\"\n                  style={{ fontSize: \"16px\", color: \"#FF8823\" }}\n                />\n              ) : (\n                <i\n                  className=\"fas fa-heart-broken\"\n                  style={{ fontSize: \"16px\", color: \"#FF2929\" }}\n                />\n              )}\n            </Card>\n          </Col>\n          <Col span={4}>\n            <Card\n              size=\"small\"\n              className=\"statsCardIT\"\n              style={{ borderRadius: \"0 2px 2px 0\" }}\n            >\n              {props.activity.text ? props.activity.text : \"---\"}\n            </Card>\n          </Col>\n        </React.Fragment>\n      ) : null}\n    </Row>\n  );\n};\n\nexport default InboxHeader;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Contact/Contact.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Overview.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Badges/Badges.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"167","replacedBy":"171"},{"ruleId":"169","replacedBy":"172"},{"ruleId":"167","replacedBy":"173"},{"ruleId":"169","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":131,"column":6,"nodeType":"177","endLine":131,"endColumn":38,"suggestions":"178"},{"ruleId":"167","replacedBy":"179"},{"ruleId":"169","replacedBy":"180"},{"ruleId":"167","replacedBy":"181"},{"ruleId":"169","replacedBy":"182"},{"ruleId":"175","severity":1,"message":"176","line":129,"column":6,"nodeType":"177","endLine":138,"endColumn":4,"suggestions":"183"},{"ruleId":"167","replacedBy":"184"},{"ruleId":"169","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":12},{"ruleId":"186","severity":1,"message":"190","line":11,"column":3,"nodeType":"188","messageId":"189","endLine":11,"endColumn":15},{"ruleId":"186","severity":1,"message":"191","line":18,"column":3,"nodeType":"188","messageId":"189","endLine":18,"endColumn":18},{"ruleId":"186","severity":1,"message":"192","line":19,"column":3,"nodeType":"188","messageId":"189","endLine":19,"endColumn":20},{"ruleId":"186","severity":1,"message":"193","line":23,"column":3,"nodeType":"188","messageId":"189","endLine":23,"endColumn":17},{"ruleId":"186","severity":1,"message":"194","line":42,"column":22,"nodeType":"188","messageId":"189","endLine":42,"endColumn":31},{"ruleId":"167","replacedBy":"195"},{"ruleId":"169","replacedBy":"196"},{"ruleId":"186","severity":1,"message":"197","line":22,"column":7,"nodeType":"188","messageId":"189","endLine":22,"endColumn":16},{"ruleId":"186","severity":1,"message":"198","line":35,"column":3,"nodeType":"188","messageId":"189","endLine":35,"endColumn":16},{"ruleId":"186","severity":1,"message":"199","line":36,"column":3,"nodeType":"188","messageId":"189","endLine":36,"endColumn":15},{"ruleId":"186","severity":1,"message":"200","line":37,"column":3,"nodeType":"188","messageId":"189","endLine":37,"endColumn":13},{"ruleId":"186","severity":1,"message":"201","line":38,"column":3,"nodeType":"188","messageId":"189","endLine":38,"endColumn":15},{"ruleId":"186","severity":1,"message":"202","line":39,"column":3,"nodeType":"188","messageId":"189","endLine":39,"endColumn":15},{"ruleId":"186","severity":1,"message":"203","line":56,"column":9,"nodeType":"188","messageId":"189","endLine":56,"endColumn":16},{"ruleId":"186","severity":1,"message":"204","line":63,"column":10,"nodeType":"188","messageId":"189","endLine":63,"endColumn":22},{"ruleId":"186","severity":1,"message":"205","line":63,"column":24,"nodeType":"188","messageId":"189","endLine":63,"endColumn":39},{"ruleId":"186","severity":1,"message":"206","line":68,"column":10,"nodeType":"188","messageId":"189","endLine":68,"endColumn":21},{"ruleId":"186","severity":1,"message":"207","line":72,"column":10,"nodeType":"188","messageId":"189","endLine":72,"endColumn":20},{"ruleId":"186","severity":1,"message":"208","line":79,"column":27,"nodeType":"188","messageId":"189","endLine":79,"endColumn":45},{"ruleId":"186","severity":1,"message":"209","line":92,"column":9,"nodeType":"188","messageId":"189","endLine":92,"endColumn":20},{"ruleId":"175","severity":1,"message":"210","line":294,"column":6,"nodeType":"177","endLine":294,"endColumn":38,"suggestions":"211"},{"ruleId":"186","severity":1,"message":"212","line":325,"column":9,"nodeType":"188","messageId":"189","endLine":325,"endColumn":26},{"ruleId":"186","severity":1,"message":"213","line":329,"column":9,"nodeType":"188","messageId":"189","endLine":329,"endColumn":27},{"ruleId":"186","severity":1,"message":"214","line":335,"column":9,"nodeType":"188","messageId":"189","endLine":335,"endColumn":29},{"ruleId":"186","severity":1,"message":"215","line":342,"column":9,"nodeType":"188","messageId":"189","endLine":342,"endColumn":21},{"ruleId":"186","severity":1,"message":"198","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":16},{"ruleId":"186","severity":1,"message":"199","line":9,"column":3,"nodeType":"188","messageId":"189","endLine":9,"endColumn":15},{"ruleId":"186","severity":1,"message":"200","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":13},{"ruleId":"186","severity":1,"message":"201","line":11,"column":3,"nodeType":"188","messageId":"189","endLine":11,"endColumn":15},{"ruleId":"186","severity":1,"message":"216","line":12,"column":3,"nodeType":"188","messageId":"189","endLine":12,"endColumn":21},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],["217"],["218"],["217"],["218"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updatePipeDeals'. Either include it or remove the dependency array.","ArrayExpression",["219"],["217"],["218"],["217"],["218"],["220"],["217"],["218"],"no-unused-vars","'Statistic' is defined but never used.","Identifier","unusedVar","'Descriptions' is defined but never used.","'ArrowUpOutlined' is defined but never used.","'ArrowDownOutlined' is defined but never used.","'DollarOutlined' is defined but never used.","'setLoaded' is assigned a value but never used.",["217"],["218"],"'taskIcons' is assigned a value but never used.","'CheckOutlined' is defined but never used.","'SmileTwoTone' is defined but never used.","'MehTwoTone' is defined but never used.","'PhoneTwoTone' is defined but never used.","'UserOutlined' is defined but never used.","'TabPane' is assigned a value but never used.","'showDealType' is assigned a value but never used.","'setShowDealType' is assigned a value but never used.","'noActsToday' is assigned a value but never used.","'noActsPast' is assigned a value but never used.","'setFilteredUserAct' is assigned a value but never used.","'selectActId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.dst', 'props.processedActs', and 'props.today'. Either include them or remove the dependency array. If 'setCurrentAct' needs the current value of 'props.dst', you can also switch to useReducer instead of useState and read 'props.dst' in the reducer.",["221"],"'saveEditorContent' is assigned a value but never used.","'getSavedEditorData' is assigned a value but never used.","'renderContentAsRawJs' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'ClockCircleTwoTone' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [pipeId, selectedUserId, teamId, updatePipeDeals]",{"range":"228","text":"229"},"Update the dependencies array to be: [props.deals, props.activities, props.orgs, props.pipelines, props.stages, props.selectedUserId, props.teamId, props.pipeId, updatePipeDeals]",{"range":"230","text":"231"},"Update the dependencies array to be: [filteredUserAct, props.dst, props.processedActs, props.today, selectedActId]",{"range":"232","text":"233"},[4376,4408],"[pipeId, selectedUserId, teamId, updatePipeDeals]",[3456,3616],"[props.deals, props.activities, props.orgs, props.pipelines, props.stages, props.selectedUserId, props.teamId, props.pipeId, updatePipeDeals]",[8065,8097],"[filteredUserAct, props.dst, props.processedActs, props.today, selectedActId]"]