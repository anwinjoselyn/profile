[{"/Users/aj/Projects/personal/portfolio/src/App.js":"1","/Users/aj/Projects/personal/portfolio/src/reportWebVitals.js":"2","/Users/aj/Projects/personal/portfolio/src/index.js":"3","/Users/aj/Projects/personal/portfolio/src/Containers/Home/Home.js":"4","/Users/aj/Projects/personal/portfolio/src/Containers/About/About.js":"5","/Users/aj/Projects/personal/portfolio/src/Containers/Skills/Skills.js":"6","/Users/aj/Projects/personal/portfolio/src/Containers/Experience/Experience.js":"7","/Users/aj/Projects/personal/portfolio/src/Containers/Resume/Resume.js":"8","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Showcase.js":"9","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Kanban1.js":"10","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/PipeView.js":"11","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/DealsList.js":"12","/Users/aj/Projects/personal/portfolio/src/libs/validators.js":"13","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Explanation.js":"14","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Kanban2.js":"15","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/PipeView.js":"16","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Explanation.js":"17","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/OverviewStats.js":"18","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/OtherActs.js":"19","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Inbox.js":"20","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/AllActivities.js":"21","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Tasks.js":"22","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/InboxHeader.js":"23","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Explanation.js":"24","/Users/aj/Projects/personal/portfolio/src/Containers/Contact/Contact.js":"25"},{"size":5461,"mtime":1611574534648,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1610542186091,"results":"28","hashOfConfig":"27"},{"size":449,"mtime":1610708075183,"results":"29","hashOfConfig":"27"},{"size":1691,"mtime":1611574346901,"results":"30","hashOfConfig":"27"},{"size":5150,"mtime":1610793531765,"results":"31","hashOfConfig":"27"},{"size":7397,"mtime":1611498366469,"results":"32","hashOfConfig":"27"},{"size":12675,"mtime":1610805444666,"results":"33","hashOfConfig":"27"},{"size":24006,"mtime":1611224634960,"results":"34","hashOfConfig":"27"},{"size":30097,"mtime":1611500249986,"results":"35","hashOfConfig":"27"},{"size":9963,"mtime":1611224652529,"results":"36","hashOfConfig":"27"},{"size":3717,"mtime":1610982697397,"results":"37","hashOfConfig":"27"},{"size":28608,"mtime":1611068222674,"results":"38","hashOfConfig":"27"},{"size":3558,"mtime":1610970869232,"results":"39","hashOfConfig":"27"},{"size":3290,"mtime":1611140357213,"results":"40","hashOfConfig":"27"},{"size":24891,"mtime":1611402112702,"results":"41","hashOfConfig":"27"},{"size":4242,"mtime":1611150837540,"results":"42","hashOfConfig":"27"},{"size":3415,"mtime":1611153440537,"results":"43","hashOfConfig":"27"},{"size":7033,"mtime":1611153673908,"results":"44","hashOfConfig":"27"},{"size":8342,"mtime":1611410469910,"results":"45","hashOfConfig":"27"},{"size":27744,"mtime":1611500416504,"results":"46","hashOfConfig":"27"},{"size":44403,"mtime":1611405745122,"results":"47","hashOfConfig":"27"},{"size":3125,"mtime":1611405644271,"results":"48","hashOfConfig":"27"},{"size":4944,"mtime":1611153673901,"results":"49","hashOfConfig":"27"},{"size":3476,"mtime":1611414865126,"results":"50","hashOfConfig":"27"},{"size":13691,"mtime":1611571827337,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18ibiat",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/aj/Projects/personal/portfolio/src/App.js",[],"/Users/aj/Projects/personal/portfolio/src/reportWebVitals.js",[],["112","113"],"/Users/aj/Projects/personal/portfolio/src/index.js",[],["114","115"],"/Users/aj/Projects/personal/portfolio/src/Containers/Home/Home.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/About/About.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Skills/Skills.js",[],["116","117"],"/Users/aj/Projects/personal/portfolio/src/Containers/Experience/Experience.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Resume/Resume.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Showcase.js",["118"],"import React, { useState, useEffect } from \"react\";\n\nimport { Tabs, Row, Col } from \"antd\";\n\nimport { Card, Tooltip, OverlayTrigger } from \"react-bootstrap\";\n\n//import axios from \"axios\";\n\nimport { format, parseISO, isAfter, isEqual } from \"date-fns\";\n\nimport { isEmpty } from \"../../libs/validators.js\";\n\nimport Kanban1 from \"./Components/Kanban1/Kanban1\";\nimport Kanban2 from \"./Components/Kanban2/Kanban2\";\nimport Activities from \"./Components/Tasks/Tasks\";\n\nimport \"./Showcase.css\";\n\nconst { TabPane } = Tabs;\n\nlet currentMonthNumber = parseInt(format(new Date(), \"MM\"));\nlet monthStartNumber = 1;\n\nconst pipelines = require(\"./Data/pipelines.json\").data;\nconst deals = require(\"./Data/deals.json\").data;\nconst common = require(\"./Data/common.json\");\nconst usersByTeam = require(\"./Data/temp.json\").data;\nconst activities = require(\"./Data/activities.json\").data;\nconst contacts = require(\"./Data/contacts.json\").data;\nconst orgs = require(\"./Data/orgs.json\").data;\nconst stages = require(\"./Data/stages.json\").data;\nconst users = require(\"./Data/users.json\").data;\n\nconst ShowCase = props => {\n  const [filteredDeals, setFilteredDeals] = useState([]);\n  const [allDeals, setAllDeals] = useState(deals);\n  //const [localDeals, setLocalDeals] = useState(deals);\n  const [dealsValue, setDealsValue] = useState(24000);\n  const [selectedUserId, setSelectedUserId] = useState(2);\n  const [userQuota, setUserQuota] = useState(1000);\n  const [teamQuota, setTeamQuota] = useState(1000);\n  const [userAchieved, setUserAch] = useState(0);\n  const [teamAchieved, setTeamAch] = useState(0);\n  const [pipeId, setPipeId] = useState(1);\n  const [teamId, setTeamId] = useState(1);\n  const [counter, setCounter] = useState(0);\n  const [currentUserTarget, setUserTarget] = useState(null);\n  const [currentTeamTarget, setTeamTarget] = useState(null);\n  const [total, setTotal] = useState([]);\n  const [pipeDeals, setPipeDeals] = useState(null);\n  const [maDeals, setMaDeals] = useState([]);\n  const [sdDeals, setSdDeals] = useState([]);\n  const [saDeals, setsaDeals] = useState([]);\n  const [filtered, setFiltered] = useState(null);\n  const [tabKey, setTabKey] = useState(\"3\");\n  const [theActs, setTheActs] = useState([]);\n  const [dataLoaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    let filteredDeals = [];\n\n    let filtered = stages.filter(s => s.pipeId === parseInt(pipeId));\n    console.log(\"filtered\", filtered);\n    setFiltered(filtered);\n\n    if (pipeId)\n      updatePipeDeals(\n        stages.filter(s => s.isActive),\n        pipelines.filter(pipe => pipe.teamId === teamId)[0].id,\n        deals,\n        orgs,\n        activities,\n        selectedUserId,\n        filtered\n      );\n\n    if (deals && deals.length > 0) {\n      filteredDeals = deals.filter(d =>\n        filtered.find(stage => stage.id === d.stageId)\n      );\n    }\n\n    console.log(\"deals\", deals);\n    console.log(\"filteredDeals\", filteredDeals);\n\n    if (common.tenant && common.tenant.fyStartMonth === \"January\") {\n      monthStartNumber = 1;\n    } else {\n      monthStartNumber = 4;\n    }\n    console.log(\"currentMonthNumber\", currentMonthNumber);\n    currentMonthNumber =\n      currentMonthNumber - monthStartNumber >= 0\n        ? currentMonthNumber - monthStartNumber + 1\n        : currentMonthNumber - monthStartNumber + 13;\n\n    let maPipeId = pipelines.filter(p => p.teamId === 1)[0].id;\n    let sdPipeId = pipelines.filter(p => p.teamId === 2)[0].id;\n    let saPipeId = pipelines.filter(p => p.teamId === 3)[0].id;\n\n    let filteredMaStages = stages\n      .filter(s => s.isActive)\n      .filter(s => s.pipeId === maPipeId);\n    let filteredSdStages = stages\n      .filter(s => s.isActive)\n      .filter(s => s.pipeId === sdPipeId);\n    let filteredSaStages = stages\n      .filter(s => s.isActive)\n      .filter(s => s.pipeId === saPipeId);\n\n    let maDeals = deals.filter(ad =>\n      filteredMaStages.find(fms => fms.id === ad.stageId)\n    );\n    //console.log(\"maDeals\", maDeals);\n\n    let sdDeals = deals.filter(ad =>\n      filteredSdStages.find(fms => fms.id === ad.stageId)\n    );\n    //console.log(\"sdDeals\", sdDeals);\n\n    let saDeals = deals.filter(ad =>\n      filteredSaStages.find(fms => fms.id === ad.stageId)\n    );\n\n    setSdDeals(sdDeals);\n    setMaDeals(maDeals);\n    setsaDeals(saDeals);\n    setFilteredDeals(filteredDeals);\n    setTheActs(activities);\n    setLoaded(true);\n  }, [pipeId, selectedUserId, teamId]);\n\n  const updateTargetsAndAchieved = teamId => {\n    let currentUserTarget =\n      common.userTargets !== null &&\n      common.userTargets !== undefined &&\n      selectedUserId !== 0 &&\n      common.userTargets.find(ut => ut.userId === selectedUserId)\n        ? common.userTargets.filter(ut => ut.userId === selectedUserId)[0]\n        : {};\n\n    let currentTeamTarget =\n      common.teamTargets !== null &&\n      common.teamTargets !== undefined &&\n      common.teamTargets.find(tt => tt.teamId === teamId)\n        ? common.teamTargets.filter(tt => tt.teamId === teamId)[0]\n        : {};\n\n    let userAchieved = 0;\n    let userQuota = 0;\n    let teamAchieved = 0;\n    let teamQuota = 0;\n    let cMN = currentMonthNumber;\n    console.log(\"cMN\", cMN);\n    let currentMonth =\n      cMN !== undefined && cMN !== null\n        ? cMN === 1\n          ? \"m1\"\n          : cMN === 2\n          ? \"m2\"\n          : cMN === 3\n          ? \"m3\"\n          : cMN === 4\n          ? \"m4\"\n          : cMN === 5\n          ? \"m5\"\n          : cMN === 6\n          ? \"m6\"\n          : cMN === 7\n          ? \"m7\"\n          : cMN === 8\n          ? \"m8\"\n          : cMN === 9\n          ? \"m9\"\n          : cMN === 10\n          ? \"m10\"\n          : cMN === 11\n          ? \"m11\"\n          : cMN === 12\n          ? \"m12\"\n          : null\n        : null;\n    console.log(\"currentMonth\", currentMonth);\n    if (!isEmpty(currentUserTarget)) {\n      switch (currentMonth) {\n        default:\n          break;\n        case \"m1\":\n          userQuota = currentUserTarget.m1;\n          break;\n        case \"m2\":\n          userQuota = currentUserTarget.m2;\n          break;\n        case \"m3\":\n          userQuota = currentUserTarget.m3;\n          break;\n        case \"m4\":\n          userQuota = currentUserTarget.m4;\n          break;\n        case \"m5\":\n          userQuota = currentUserTarget.m5;\n          break;\n        case \"m6\":\n          userQuota = currentUserTarget.m6;\n          break;\n        case \"m7\":\n          userQuota = currentUserTarget.m7;\n          break;\n        case \"m8\":\n          userQuota = currentUserTarget.m8;\n          break;\n        case \"m9\":\n          userQuota = currentUserTarget.m9;\n          break;\n        case \"m10\":\n          userQuota = currentUserTarget.m10;\n          break;\n        case \"m11\":\n          userQuota = currentUserTarget.m11;\n          break;\n        case \"m12\":\n          userQuota = currentUserTarget.m12;\n          break;\n      }\n    } else {\n      userQuota = 0;\n      switch (currentMonth) {\n        default:\n          break;\n        case \"m1\":\n          teamQuota = currentTeamTarget.m1;\n          break;\n        case \"m2\":\n          teamQuota = currentTeamTarget.m2;\n          break;\n        case \"m3\":\n          teamQuota = currentTeamTarget.m3;\n          break;\n        case \"m4\":\n          teamQuota = currentTeamTarget.m4;\n          break;\n        case \"m5\":\n          teamQuota = currentTeamTarget.m5;\n          break;\n        case \"m6\":\n          teamQuota = currentTeamTarget.m6;\n          break;\n        case \"m7\":\n          teamQuota = currentTeamTarget.m7;\n          break;\n        case \"m8\":\n          teamQuota = currentTeamTarget.m8;\n          break;\n        case \"m9\":\n          teamQuota = currentTeamTarget.m9;\n          break;\n        case \"m10\":\n          teamQuota = currentTeamTarget.m10;\n          break;\n        case \"m11\":\n          teamQuota = currentTeamTarget.m11;\n          break;\n        case \"m12\":\n          teamQuota = currentTeamTarget.m12;\n          break;\n      }\n    }\n    console.log(\"userQuota\", userQuota);\n    console.log(\"selectedUserId\", selectedUserId);\n    console.log(\"teamId\", teamId);\n    deals.forEach(ad => {\n      if (teamId === 3) {\n        if (\n          ad.wonDate !== null &&\n          ad.wonDate !== undefined &&\n          parseInt(format(parseISO(ad.wonDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.wonUserId !== null &&\n            ad.wonUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.wonUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      } else if (teamId === 1) {\n        if (\n          ad.mqlDate !== null &&\n          ad.mqlDate !== undefined &&\n          parseInt(format(parseISO(ad.mqlDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.mqlUserId !== null &&\n            ad.mqlUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.mqlUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      } else if (teamId === 2) {\n        if (\n          ad.sqlDate !== null &&\n          ad.sqlDate !== undefined &&\n          parseInt(format(parseISO(ad.sqlDate), \"MM\")) === cMN\n        ) {\n          teamAchieved += 1;\n          if (\n            ad.sqlUserId !== null &&\n            ad.sqlUserId !== undefined &&\n            selectedUserId !== 0 &&\n            ad.sqlUserId === selectedUserId\n          ) {\n            userAchieved += 1;\n          }\n        }\n      }\n    });\n    console.log(\"userAchieved\", userAchieved);\n    console.log(\"teamAchieved\", teamAchieved);\n\n    setTeamQuota(teamQuota);\n    setTeamAch(userAchieved);\n    setUserAch(userAchieved);\n    setUserQuota(userQuota);\n    setUserTarget(currentUserTarget);\n    setTeamTarget(currentUserTarget);\n  };\n\n  const onDragStart = (event, id) => {\n    console.log(\"dragstart on div/deal: \", id);\n    event.dataTransfer.setData(\"id\", id);\n  };\n\n  const onDragOver = event => {\n    event.preventDefault();\n  };\n\n  const onDrop = (event, stageId) => {\n    event.preventDefault();\n    let dealId = event.dataTransfer.getData(\"id\");\n\n    let originalStageID = deals.filter(deal => deal.id === parseInt(dealId))[0]\n      .stageId;\n    //console.log(\"dealId\", dealId);\n    //console.log(\"originalStageID\", originalStageID);\n\n    if (originalStageID !== parseInt(stageId)) {\n      let allDealsTemp = allDeals;\n      let dealsTemp = deals;\n      let id = parseInt(dealId);\n\n      if (allDealsTemp.find(ad => ad.id === id)) {\n        allDealsTemp = allDealsTemp.map(ad => {\n          if (ad.id === id) {\n            ad.stageId = stageId;\n          }\n          return ad;\n        });\n      }\n      if (dealsTemp.find(d => d.id === id)) {\n        dealsTemp = dealsTemp.map(d => {\n          if (d.id === id) {\n            d.stageId = stageId;\n          }\n          return d;\n        });\n      }\n\n      setAllDeals(allDealsTemp);\n      //setLocalDeals(dealsTemp);\n\n      updatePipeDeals(\n        stages,\n        pipeId,\n        allDealsTemp,\n        orgs,\n        activities,\n        selectedUserId,\n        filtered\n      );\n    }\n  };\n\n  const updatePipeDeals = (\n    stages,\n    pipeId,\n    deals,\n    orgs,\n    activities,\n    selectedUserId,\n    filtered\n  ) => {\n    let object = [];\n    let filteredDeals = [];\n\n    console.log(\"selectedUserId\", selectedUserId);\n    console.log(\"maDeals\", maDeals);\n    console.log(\"teamId\", teamId);\n    console.log(\"sdDeals\", sdDeals);\n    console.log(\"saDeals\", saDeals);\n\n    if (parseInt(selectedUserId) === -1) {\n      if (teamId === 1) {\n        filteredDeals = maDeals.filter(deal =>\n          filtered.find(stage => parseInt(deal.stageId) === parseInt(stage.id))\n        );\n      } else if (teamId === 2) {\n        filteredDeals = sdDeals.filter(deal =>\n          filtered.find(stage => parseInt(deal.stageId) === parseInt(stage.id))\n        );\n      } else if (teamId === 3) {\n        filteredDeals = saDeals.filter(deal =>\n          filtered.find(stage => parseInt(deal.stageId) === parseInt(stage.id))\n        );\n      }\n      //console.log(\"filteredDeals\", filteredDeals);\n      //console.log(\"usersByTeam[6]\", usersByTeam[6]);\n      filteredDeals = filteredDeals.filter(fd =>\n        usersByTeam[6].find(u => u.id === fd.userId)\n      );\n      //console.log(\"filteredDeals\", filteredDeals);\n    } else if (parseInt(selectedUserId) === 0) {\n      filteredDeals = deals.filter(deal =>\n        filtered.find(stage => parseInt(deal.stageId) === parseInt(stage.id))\n      );\n    } else {\n      filteredDeals = deals.filter(deal =>\n        filtered.find(\n          stage =>\n            parseInt(deal.stageId) === parseInt(stage.id) &&\n            parseInt(deal.userId) === parseInt(selectedUserId)\n        )\n      );\n    }\n\n    console.log(\"filteredDeals\", filteredDeals);\n    let insideTotal = [];\n\n    filtered.forEach(stage => {\n      insideTotal[stage.id] = 0;\n      filteredDeals.forEach(deal => {\n        //console.log(\"deal.dealValue\", deal.dealValue);\n\n        if (deal.stageId === stage.id) {\n          insideTotal[stage.id] +=\n            deal.dealValue !== null &&\n            deal.dealValue !== undefined &&\n            !isNaN(parseInt(deal.dealValue))\n              ? parseInt(deal.dealValue)\n              : 0;\n        }\n      });\n    });\n\n    console.log(\"insideTotal\", insideTotal);\n    setTotal(insideTotal);\n\n    //console.log(\"filteredDeals\", filteredDeals);\n    //filteredDeals = filteredDeals[0];\n\n    let sum = 0;\n    if (filteredDeals !== undefined && filteredDeals.length > 0)\n      filteredDeals.forEach(deal => {\n        sum +=\n          deal.dealValue !== null &&\n          deal.dealValue !== undefined &&\n          !isNaN(parseInt(deal.dealValue))\n            ? parseInt(deal.dealValue)\n            : 0;\n      });\n\n    console.log(\"sum\", sum);\n\n    filtered.forEach(stage => (object[stage.id] = []));\n    console.log(\"object\", object);\n\n    if (\n      filteredDeals &&\n      filteredDeals.length > 0 &&\n      filteredDeals !== undefined\n    ) {\n      filteredDeals.forEach(deal => {\n        object[parseInt(deal.stageId)].push(\n          <Card\n            onDragStart={event => onDragStart(event, deal.id)}\n            draggable\n            key={deal.id}\n            className=\"draggable\"\n            bg=\"dark\"\n          >\n            <span className=\"SpanDetails\">\n              <span href={`#`}>{deal.dealName}</span>\n              <a\n                href={`/people/details/${deal.contactId}`}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <OverlayTrigger\n                  placement=\"left\"\n                  overlay={\n                    <Tooltip\n                      style={{\n                        background: \"#343a40\",\n                        color: \"#fcfcfc\",\n                        textAlign: \"left\"\n                      }}\n                      className=\"dealTooltip\"\n                    >\n                      {contacts !== undefined &&\n                      contacts !== null &&\n                      contacts.length > 0 &&\n                      deal.contactId !== undefined &&\n                      deal.contactId !== null &&\n                      contacts.find(p => p.id === deal.contactId)\n                        ? contacts\n                            .filter(p => p.id === deal.contactId)\n                            .map(p => (\n                              <div\n                                key={p.id}\n                                style={{ textAlign: \"left\", color: \"orange\" }}\n                              >\n                                <Row>\n                                  <Col\n                                    xs={4}\n                                    sm={4}\n                                    md={4}\n                                    lg={4}\n                                    xl={4}\n                                    style={{ textAlign: \"center\" }}\n                                  >\n                                    <i className=\"far fa-user\" />\n                                  </Col>\n                                  <Col>\n                                    <span>\n                                      {p.contactName !== null &&\n                                      p.contactName !== undefined &&\n                                      p.contactName !== \"\"\n                                        ? p.contactName\n                                        : \"Not defined\"}\n                                    </span>\n                                  </Col>\n                                </Row>\n                                <Row>\n                                  <Col\n                                    xs={4}\n                                    sm={4}\n                                    md={4}\n                                    lg={4}\n                                    xl={4}\n                                    style={{ textAlign: \"center\" }}\n                                  >\n                                    <i className=\"fas fa-mobile-alt\" />\n                                  </Col>\n                                  <Col>\n                                    <span>\n                                      {p.contactMainPhone !== null &&\n                                      p.contactMainPhone !== undefined &&\n                                      p.contactMainPhone !== \"\"\n                                        ? p.contactMainPhone\n                                        : \"---\"}\n                                    </span>\n                                  </Col>\n                                </Row>\n                                <Row>\n                                  <Col\n                                    xs={4}\n                                    sm={4}\n                                    md={4}\n                                    lg={4}\n                                    xl={4}\n                                    style={{ textAlign: \"center\" }}\n                                  >\n                                    <i className=\"far fa-envelope\" />\n                                  </Col>\n                                  <Col>\n                                    <span>\n                                      {p.contactEmail !== null &&\n                                      p.contactEmail !== undefined &&\n                                      p.contactEmail !== \"\"\n                                        ? p.contactEmail\n                                        : \"---\"}\n                                    </span>\n                                  </Col>\n                                </Row>\n                                <Row>\n                                  <Col\n                                    xs={4}\n                                    sm={4}\n                                    md={4}\n                                    lg={4}\n                                    xl={4}\n                                    style={{ textAlign: \"center\" }}\n                                  >\n                                    <i className=\"far fa-id-badge\" />\n                                  </Col>\n                                  <Col>\n                                    <span>\n                                      {\" \"}\n                                      {p.contactTypeId !== null &&\n                                      p.contactTypeId !== undefined &&\n                                      !isNaN(p.contactTypeId) &&\n                                      common.contactTypes !== null &&\n                                      common.contactTypes !== undefined &&\n                                      common.contactTypes.length > 0 &&\n                                      common.contactTypes.find(\n                                        ct => ct.id === p.contactTypeId\n                                      )\n                                        ? common.contactTypes.filter(\n                                            ct => ct.id === p.contactTypeId\n                                          )[0].contactTypeName\n                                        : \"Contact Type - NULL\"}\n                                    </span>\n                                  </Col>\n                                </Row>\n                              </div>\n                            ))\n                        : \"Unable to retrieve contact record\"}\n                    </Tooltip>\n                  }\n                >\n                  <i className=\"far fa-user\" />\n                </OverlayTrigger>\n              </a>\n            </span>\n\n            <Card.Body>\n              {deal.orgId !== null &&\n              deal.orgId !== undefined &&\n              orgs.find(org => org.id === deal.orgId) ? (\n                <span>\n                  {orgs.filter(org => org.id === deal.orgId)[0].orgName}\n                </span>\n              ) : null}\n            </Card.Body>\n            <Card.Footer>\n              <span className=\"footerSpan\">\n                ${\" \"}\n                {!isNaN(parseInt(deal.dealValue))\n                  ? parseInt(deal.dealValue).toLocaleString()\n                  : 0}\n              </span>\n              <button className=\"actButton\">\n                {/*<button\n                onClick={() => this.handleShowAct(deal.id)}\n                className=\"actButton\"\n              >*/}\n                <i\n                  className={\n                    activities !== undefined &&\n                    activities !== null &&\n                    activities.length > 0 &&\n                    activities.find(\n                      act => act.dealId === deal.id && !act.isCompleted\n                    )\n                      ? activities.find(\n                          act =>\n                            act.dealId === deal.id &&\n                            !act.isCompleted &&\n                            isAfter(\n                              parseISO(act.activityDate),\n                              parseISO(new Date())\n                            )\n                        )\n                        ? \"fas fa-ellipsis-h green\"\n                        : activities.find(\n                            act =>\n                              act.dealId === deal.id &&\n                              !act.isCompleted &&\n                              isEqual(\n                                parseISO(act.activityDate),\n                                parseISO(new Date())\n                              )\n                          )\n                        ? \"fas fa-ellipsis-h orange\"\n                        : \"fas fa-ellipsis-h yellow\"\n                      : \"fas fa-ellipsis-h red\"\n                  }\n                  style={{\n                    borderRadius: \"20px\",\n                    background: \"#fcfcfc\",\n                    fontSize: \"16px\"\n                  }}\n                />\n              </button>\n            </Card.Footer>\n          </Card>\n        );\n      });\n    }\n\n    setDealsValue(sum);\n    setPipeDeals(object);\n    setFilteredDeals(filteredDeals);\n\n    updateTargetsAndAchieved(pipelines.filter(p => p.id === pipeId)[0].teamId);\n    //console.log(\"this.state.pipeDeals\", pipeDeals);\n    //console.log(\"this.state.filteredDeals\", filteredDeals);\n  };\n\n  const updateActivities = acts => {\n    setTheActs(acts);\n  };\n\n  const callback = key => {\n    //console.log(key);\n    setTabKey(key);\n  };\n\n  const handleSelectPipe = e => {\n    e.preventDefault();\n    console.log(\"selecing pipe\", e.target.value);\n\n    if (\n      e.target.value &&\n      !isNaN(e.target.value) &&\n      parseInt(e.target.value) > 0\n    )\n      setPipeId(parseInt(e.target.value));\n  };\n\n  const handleSelectUser = e => {\n    e.preventDefault();\n    console.log(\"selecing user\", e.target.value);\n\n    if (e.target.value && !isNaN(e.target.value))\n      setSelectedUserId(parseInt(e.target.value));\n  };\n\n  return (\n    <Row className=\"ShowMainRow\">\n      <Col span={24} className=\"ShowMainColumn\">\n        <Row className=\"MainRow\">\n          <Col span={24} className=\"MainColumn\">\n            <div className=\"sec-t\">\n              <h2>\n                <span>Showcase</span>\n              </h2>\n            </div>\n          </Col>\n        </Row>\n        <Tabs\n          className=\"ShowCase\"\n          onChange={callback}\n          type=\"card\"\n          activeKey={tabKey}\n        >\n          <TabPane tab=\"Kanban 1\" key=\"1\">\n            {dataLoaded ? (\n              <Kanban1\n                filteredDeals={filteredDeals}\n                dealsValue={dealsValue}\n                setDealsValue={setDealsValue}\n                selectedUserId={selectedUserId}\n                setSelectedUserId={setSelectedUserId}\n                userQuota={userQuota}\n                teamQuota={teamQuota}\n                userAchieved={userAchieved}\n                teamAchieved={teamAchieved}\n                pipeId={pipeId}\n                setPipeId={setPipeId}\n                teamId={teamId}\n                setTeamId={setTeamId}\n                usersByTeam={usersByTeam}\n                pipelines={pipelines}\n                common={common}\n                activities={activities}\n                contacts={contacts}\n                orgs={orgs}\n                stages={stages}\n                users={users}\n                handleSelectPipe={handleSelectPipe}\n                handleSelectUser={handleSelectUser}\n                counter={counter}\n                total={total}\n                currentUserTarget={currentUserTarget}\n                currentTeamTarget={currentTeamTarget}\n                onDragStart={onDragStart}\n                onDrop={onDrop}\n                onDragOver={onDragOver}\n                pipeDeals={pipeDeals}\n                filtered={filtered}\n                setCounter={setCounter}\n              />\n            ) : (\n              \"Loading...\"\n            )}\n          </TabPane>\n          <TabPane tab=\"Kanban 2\" key=\"2\">\n            {dataLoaded ? (\n              <Kanban2\n                filteredDeals={filteredDeals}\n                dealsValue={dealsValue}\n                setDealsValue={setDealsValue}\n                selectedUserId={selectedUserId}\n                setSelectedUserId={setSelectedUserId}\n                userQuota={userQuota}\n                teamQuota={teamQuota}\n                userAchieved={userAchieved}\n                teamAchieved={teamAchieved}\n                pipeId={pipeId}\n                setPipeId={setPipeId}\n                teamId={teamId}\n                setTeamId={setTeamId}\n                usersByTeam={usersByTeam}\n                pipelines={pipelines}\n                common={common}\n                activities={activities}\n                contacts={contacts}\n                orgs={orgs}\n                stages={stages}\n                users={users}\n                handleSelectPipe={handleSelectPipe}\n                handleSelectUser={handleSelectUser}\n                counter={counter}\n                total={total}\n                currentUserTarget={currentUserTarget}\n                currentTeamTarget={currentTeamTarget}\n                onDragStart={onDragStart}\n                onDrop={onDrop}\n                onDragOver={onDragOver}\n                pipeDeals={pipeDeals}\n                filtered={filtered}\n                setCounter={setCounter}\n                deals={deals}\n                teamTargets={common.teamTargets}\n                userTargets={common.userTargets}\n              />\n            ) : (\n              \"Loading...\"\n            )}\n          </TabPane>\n          <TabPane tab=\"Tasks\" key=\"3\">\n            {dataLoaded ? (\n              <Activities\n                pipelines={pipelines}\n                common={common}\n                activities={theActs}\n                contacts={contacts}\n                orgs={orgs}\n                stages={stages}\n                users={users}\n                loggedinUserId={selectedUserId}\n                deals={deals}\n                teamTargets={common.teamTargets}\n                userTargets={common.userTargets}\n                updateActivities={updateActivities}\n              />\n            ) : (\n              \"Loading...\"\n            )}\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Templates<sup>*</sup>\n              </div>\n            }\n            key=\"4\"\n          >\n            Content of Tab Pane 4\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                CSS Parser<sup>*</sup>\n              </div>\n            }\n            key=\"5\"\n          >\n            Content of Tab Pane 5\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Vis Charts<sup>*</sup>\n              </div>\n            }\n            key=\"6\"\n          >\n            Content of Tab Pane 6\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                AntD Charts<sup>*</sup>\n              </div>\n            }\n            key=\"7\"\n          >\n            Content of Tab Pane 7\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Timeline 1<sup>*</sup>\n              </div>\n            }\n            key=\"8\"\n          >\n            Content of Tab Pane 8\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Timeline 2<sup>*</sup>\n              </div>\n            }\n            key=\"9\"\n          >\n            Content of Tab Pane 9\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Stripe<sup>*</sup>\n              </div>\n            }\n            key=\"10\"\n          >\n            Content of Tab Pane 10\n          </TabPane>\n          <TabPane\n            disabled\n            tab={\n              <div>\n                Image Crop<sup>*</sup>\n              </div>\n            }\n            key=\"11\"\n          >\n            Content of Tab Pane 11\n          </TabPane>\n        </Tabs>\n      </Col>\n    </Row>\n  );\n};\n\nexport default ShowCase;\n",["119","120"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Kanban1.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/PipeView.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/DealsList.js",[],["121","122"],"/Users/aj/Projects/personal/portfolio/src/libs/validators.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban1/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Kanban2.js",["123"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/PipeView.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Kanban2/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/OverviewStats.js",["124","125","126","127","128","129"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  Tabs,\n  Typography,\n  Spin,\n  Card,\n  Row,\n  Col,\n  Statistic,\n  Descriptions,\n  Divider,\n  Progress\n} from \"antd\";\n\nimport {\n  LoadingOutlined,\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  CheckCircleTwoTone,\n  BulbTwoTone,\n  HomeTwoTone,\n  DollarOutlined,\n  SmileTwoTone,\n  PhoneTwoTone,\n  MailTwoTone,\n  ThunderboltTwoTone,\n  DollarTwoTone,\n  FireTwoTone\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport \"./OverviewStats.css\";\n\nconst { TabPane } = Tabs;\nconst { Title } = Typography;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst OverviewStats = props => {\n  const [something, setSomething] = useState(props.something);\n  const [dataLoaded, setLoaded] = useState(true);\n\n  const callback = key => {\n    console.log(key);\n  };\n\n  useEffect(() => {\n    setSomething(something);\n  }, [something]);\n\n  const stats = type => {\n    if (type === \"today\") {\n      return (\n        <div className=\"OverviewStats\">\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col span={16}>\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col span={12}>\n                  <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col span={24}>\n                      <Card className=\"majorStatCard\">20 Activities</Card>\n                    </Col>\n                    <Divider>across</Divider>\n                    <Col span={24}>\n                      <Card className=\"majorStatCard\">8 Deals</Card>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col span={12}>\n                  <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">5 Demos</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">1 Meeting(s)</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">8 Calls</Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card className=\"minorStatCard\">4 Emails</Card>\n                    </Col>\n                    <Col span={24}>\n                      <Card className=\"minorStatCard\">2 Others</Card>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n            <Col span={8}>\n              <Card title=\"Achieved\" className=\"statsCard\">\n                <Progress\n                  strokeColor={{\n                    from: \"#108ee9\",\n                    to: \"#87d068\"\n                  }}\n                  status=\"active\"\n                  percent={62}\n                />\n                <br />\n                <br />\n                <span className=\"statsCardSpan\">Quota $1000</span>\n                <br />\n                <br />\n                <span className=\"statsCardSpan\">8 Deals Won</span>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col span={24}>\n              <Card className=\"firstActCard\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col span={24}>\n                    <span className=\"FACtitleSpan\">\n                      Call XYZ from ABS @ 09:30 for 10 minutes regarding Final\n                      Closure\n                    </span>\n                    <span className=\"FACInfoSpan\">1 of 20</span>\n                  </Col>\n                </Row>\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col span={8}>\n                    <Card title=\"ABS Deal\" className=\"FACSpecifics\">\n                      <DollarTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 1,000\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 3 Demos\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 7 Calls\n                      <br />\n                      <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n                      <span className=\"emptySpan\" /> 15 Emails\n                      <br />\n                    </Card>\n                  </Col>\n                  <Col span={8}>\n                    <Card title=\"ABS Corporation\" className=\"FACSpecifics\">\n                      <HomeTwoTone />\n                      <span className=\"emptySpan\" /> California\n                      <br />\n                      <BulbTwoTone />\n                      <span className=\"emptySpan\" /> Software Development\n                      <br />\n                      <DollarTwoTone />\n                      <span className=\"emptySpan\" /> 10M Annual Revenue\n                      <br />\n                      <SmileTwoTone />\n                      <span className=\"emptySpan\" /> 500 Employees\n                      <br />\n                    </Card>\n                  </Col>\n                  <Col span={8}>\n                    <Card title=\"XYZ\" className=\"FACSpecifics\">\n                      <FireTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> Influencer\n                      <br />\n                      <PhoneTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> +1 345 232 2345\n                      <br />\n                      <MailTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" />{\" \"}\n                      <a\n                        href={`mailto:xyz@abs.com`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        xyz@abs.com\n                      </a>\n                      <br />\n                      <ThunderboltTwoTone twoToneColor=\"#FC902B\" />\n                      <span className=\"emptySpan\" /> 12 Interactions\n                      <br />\n                    </Card>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className=\"site-layout-background\"\n      style={{ padding: 24, textAlign: \"center\" }}\n    >\n      <Title level={4}>Hey, Anwin. This is how your day looks like.</Title>\n      <Spin tip=\"Loading...\" indicator={antIcon} spinning={!dataLoaded}>\n        <Tabs className=\"mainAppTabs\" onChange={callback} type=\"card\">\n          <TabPane tab=\"Today\" key=\"1\">\n            {stats(\"today\")}\n          </TabPane>\n          <TabPane tab=\"Tomorrow\" key=\"2\">\n            Content of Tab Pane 2\n          </TabPane>\n          <TabPane tab=\"This Week\" key=\"3\">\n            Content of Tab Pane 3\n          </TabPane>\n        </Tabs>\n      </Spin>\n    </div>\n  );\n};\n\nexport default OverviewStats;\n",["130","131"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/OtherActs.js",["132"],"import React, { useState } from \"react\";\n\nimport { Card, Row, Col } from \"antd\";\n\nimport {\n  PhoneTwoTone,\n  MailTwoTone,\n  LaptopOutlined,\n  CustomerServiceTwoTone,\n  MobileTwoTone,\n  PushpinTwoTone,\n  CoffeeOutlined,\n  ClockCircleTwoTone\n} from \"@ant-design/icons\";\n\nimport { parseISO, format } from \"date-fns\";\n\n//import axios from \"axios\";\n\nimport \"../../Activities.css\";\n\nconst taskIcons = [\n  <PhoneTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <MobileTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <MailTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <CustomerServiceTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <LaptopOutlined twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <PushpinTwoTone twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />,\n  <CoffeeOutlined twoToneColor=\"#19BAD1\" color=\"#19BAD1\" />\n];\n\nconst OtherActs = props => {\n  const tabList = [\n    {\n      key: \"today\",\n      tab: `Today ( ${\n        props.allTodayActs !== undefined && props.allTodayActs.length > 0\n          ? props.allTodayActs.length\n          : 0\n      } )`\n    },\n    {\n      key: \"past\",\n      tab: `Past ( ${\n        props.allPastActs !== undefined && props.allPastActs.length > 0\n          ? props.allPastActs.length\n          : 0\n      } )`\n    },\n    {\n      key: \"future\",\n      tab: `Future ( ${\n        props.allFutureActs !== undefined && props.allFutureActs.length > 0\n          ? props.allFutureActs.length\n          : 0\n      } )`\n    }\n  ];\n\n  const contentList = {\n    today: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allTodayActs !== undefined && props.allTodayActs.length > 0 ? (\n          props.allTodayActs.map(a => (\n            <div key={a.id}>\n              <Row>\n                <Col span={3}>\n                  {props.activityTypes !== undefined &&\n                  props.activityTypes.length > 0 &&\n                  props.activityTypes.find(at => at.id === a.activityTypeId)\n                    ? props.activityTypes.filter(\n                        at => at.id === a.activityTypeId\n                      )[0].activityTypeSlug\n                    : \"---\"}\n                </Col>\n                <Col span={21}>\n                  <Row>\n                    <Col>Title</Col>\n                    <Col>With</Col>\n                    <Col>Time</Col>\n                    <Col>Duration</Col>\n                  </Row>\n                </Col>\n              </Row>\n            </div>\n          ))\n        ) : (\n          <p>No Tasks scheduled for today</p>\n        )}\n      </Card>\n    ),\n    past: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allPastActs !== undefined && props.allPastActs.length > 0 ? (\n          props.allPastActs.map(a => (\n            <Card\n              key={a.id}\n              className={\n                props.activity.id === a.id\n                  ? \"OACIActive OtherActsCardItems\"\n                  : \"OtherActsCardItems\"\n              }\n              size=\"small\"\n              bordered={false}\n            >\n              <Row>\n                <Col span={3}>\n                  <p className=\"slugP\">\n                    <>\n                      {props.activityTypes !== undefined &&\n                      props.activityTypes.length > 0 &&\n                      props.activityTypes.find(\n                        at => at.id === a.activityTypeId\n                      ) ? (\n                        <i\n                          className={\n                            props.activityTypes.filter(\n                              at => at.id === a.activityTypeId\n                            )[0].activityTypeSlug\n                          }\n                          style={{ color: \"#19BAD1\" }}\n                        />\n                      ) : (\n                        \"---\"\n                      )}\n                    </>\n                    {/*<PhoneTwoTone twoToneColor=\"#19BAD1\" />*/}\n                  </p>\n                </Col>\n                <Col span={14}>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"titleP\">{a.activityTitle}</p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"dealP\">\n                        {props.allDeals !== undefined &&\n                        props.allDeals.length > 0 &&\n                        a.dealId &&\n                        props.allDeals.find(d => d.id === a.dealId)\n                          ? props.allDeals.filter(d => d.id === a.dealId)[0]\n                              .dealName\n                          : \"---\"}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"withP\">\n                        {props.people !== undefined &&\n                        props.people.length > 0 &&\n                        props.people.find(p => p.id === a.contactId)\n                          ? props.people.filter(p => p.id === a.contactId)[0]\n                              .contactName\n                          : \"---\"}\n                        {\" | \"}\n                        {props.orgs !== undefined &&\n                        props.orgs.length > 0 &&\n                        props.orgs.find(o => o.id === a.orgId)\n                          ? props.orgs.filter(o => o.id === a.orgId)[0].orgName\n                          : \"---\"}\n                      </p>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col span={7}>\n                  <Row>\n                    <Col span={24}>\n                      <p className=\"timeP\">\n                        <ClockCircleTwoTone twoToneColor=\"#fa4a09\" />{\" \"}\n                        {a.activityDate\n                          ? format(parseISO(a.activityDate), \"dd MMM yyyy\")\n                          : \"---\"}\n                      </p>\n                    </Col>\n                    <Col span={24}>\n                      <p className=\"timeP\">\n                        {a.duration ? a.duration + \" minutes\" : \"--\"}\n                      </p>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Card>\n          ))\n        ) : (\n          <p>No Open tasks from the past</p>\n        )}\n      </Card>\n    ),\n    future: (\n      <Card className=\"OtherActsCard\" size=\"small\" bordered={false}>\n        {props.allFutureActs !== undefined && props.allFutureActs.length > 0 ? (\n          props.allFutureActs.map(a => (\n            <Card\n              key={a.id}\n              className=\"OtherActsCardItems\"\n              size=\"small\"\n              bordered={false}\n            >\n              <Row>\n                <Col span={3}>\n                  {props.activityTypes !== undefined &&\n                  props.activityTypes.length > 0 &&\n                  props.activityTypes.find(at => at.id === a.activityTypeId) ? (\n                    <>\n                      props.activityTypes.filter( at => at.id ===\n                      a.activityTypeId )[0].activityTypeSlug\n                    </>\n                  ) : (\n                    \"---\"\n                  )}\n                </Col>\n                <Col span={21}>\n                  <Row>\n                    <Col>Title</Col>\n                    <Col>With</Col>\n                    <Col>Time</Col>\n                    <Col>Duration</Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Card>\n          ))\n        ) : (\n          <p>No Scheduled Tasks</p>\n        )}\n      </Card>\n    )\n  };\n\n  const [tabState, setTabState] = useState({\n    key:\n      props.allTodayActs !== undefined && props.allTodayActs.length > 0\n        ? \"today\"\n        : \"past\"\n  });\n\n  const onTabChange = (key, type) => {\n    console.log(key, type);\n    setTabState({ [type]: key });\n  };\n\n  return (\n    <div className=\"OtherActs\">\n      <Card\n        style={{ width: \"100%\", textAlign: \"center\" }}\n        tabList={tabList}\n        activeTabKey={tabState.key}\n        onTabChange={key => {\n          onTabChange(key, \"key\");\n        }}\n        size=\"small\"\n        className=\"OtherActsMainCard\"\n      >\n        {contentList[tabState.key]}\n      </Card>\n    </div>\n  );\n};\n\nexport default OtherActs;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Inbox.js",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/AllActivities.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Tasks.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/InboxComps/InboxHeader.js",["150","151","152","153","154"],"import React from \"react\";\n\nimport { Row, Col, Card } from \"antd\";\n\nimport { format, parseISO, isPast, sub } from \"date-fns\";\n\nimport {\n  CheckOutlined,\n  SmileTwoTone,\n  MehTwoTone,\n  PhoneTwoTone,\n  ClockCircleTwoTone\n} from \"@ant-design/icons\";\n\n//import axios from \"axios\";\n\nimport \"../../Activities.css\";\n\nconst InboxHeader = props => {\n  return (\n    <Row className=\"InboxHeaderRow\">\n      <Col span={!props.activity.isCompleted ? 2 : 1}>\n        <Card\n          size=\"small\"\n          className=\"statsCardIT\"\n          style={{ borderRadius: \"2px 0 0 2px\" }}\n        >\n          {props.activityTypes !== undefined &&\n          props.activityTypes.length > 0 &&\n          props.activityTypes.find(\n            at => at.id === props.activity.activityTypeId\n          ) ? (\n            <i\n              className={\n                props.activityTypes.filter(\n                  at => at.id === props.activity.activityTypeId\n                )[0].activityTypeSlug\n              }\n            />\n          ) : (\n            \"---\"\n          )}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 9 : 6}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          With{\" \"}\n          {props.people !== undefined &&\n          props.people.length > 0 &&\n          props.activity.contactId !== undefined &&\n          props.activity.contactId !== null &&\n          props.people.find(c => c.id === props.activity.contactId)\n            ? props.people.filter(c => c.id === props.activity.contactId)[0]\n                .contactName\n            : \" N/A\"}{\" \"}\n          from{\" \"}\n          {props.orgs !== undefined &&\n          props.orgs.length > 0 &&\n          props.activity.orgId !== undefined &&\n          props.activity.orgId !== null &&\n          props.orgs.find(o => o.id === props.activity.orgId)\n            ? props.orgs.filter(o => o.id === props.activity.orgId)[0].orgName\n            : \" N/A\"}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 5 : 4}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          <i\n            className=\"far fa-clock\"\n            style={\n              isPast(\n                sub(parseISO(props.activity.activityDate), {\n                  years: 0,\n                  months: 0,\n                  weeks: 0,\n                  days: 0,\n                  hours: 4 + props.dst,\n                  minutes: 30,\n                  seconds: 0\n                })\n              )\n                ? {\n                    cursor: \"pointer\",\n                    fontSize: \"16px\",\n                    color: \"#FF2929\"\n                  }\n                : {\n                    cursor: \"pointer\",\n                    fontSize: \"16px\",\n                    color: \"#19BAD1\"\n                  }\n            }\n          />{\" \"}\n          {format(parseISO(props.activity.activityDate), \"dd-MMM\").toString()}{\" \"}\n          {\" - \"}\n          {props.activity.activityTime\n            ? props.activity.activityTime.split(\":\")[0]\n            : \"--\"}\n          {\":\"}\n          {props.activity.activityTime\n            ? props.activity.activityTime.split(\":\")[1]\n            : \"--\"}\n          {props.activity.activityTime &&\n          parseInt(props.activity.activityTime.split(\":\")[0]) > 11\n            ? \" PM\"\n            : \" AM\"}{\" \"}\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 4 : 3}>\n        <Card size=\"small\" className=\"statsCardIT\">\n          {props.activity.duration} minutes\n        </Card>\n      </Col>\n      <Col span={!props.activity.isCompleted ? 4 : 3}>\n        <Card\n          size=\"small\"\n          className=\"statsCardIT\"\n          style={\n            !props.activity.isCompleted ? { borderRadius: \"0 2px 2px 0\" } : null\n          }\n        >\n          {props.activity.isCompleted ? (\n            <i\n              className=\"fas fa-check\"\n              style={{ fontSize: \"16px\", color: \"#92F0AE\" }}\n            />\n          ) : (\n            \"Ongoing\"\n          )}\n        </Card>\n      </Col>\n      {props.activity.isCompleted ? (\n        <React.Fragment>\n          <Col span={3}>\n            <Card size=\"small\" className=\"statsCardIT\">\n              {props.activity.success ? (\n                <i\n                  className=\"far fa-grin-beam\"\n                  style={{ fontSize: \"16px\", color: \"#FF8823\" }}\n                />\n              ) : (\n                <i\n                  className=\"fas fa-heart-broken\"\n                  style={{ fontSize: \"16px\", color: \"#FF2929\" }}\n                />\n              )}\n            </Card>\n          </Col>\n          <Col span={4}>\n            <Card\n              size=\"small\"\n              className=\"statsCardIT\"\n              style={{ borderRadius: \"0 2px 2px 0\" }}\n            >\n              {props.activity.text ? props.activity.text : \"---\"}\n            </Card>\n          </Col>\n        </React.Fragment>\n      ) : null}\n    </Row>\n  );\n};\n\nexport default InboxHeader;\n","/Users/aj/Projects/personal/portfolio/src/Containers/Showcase/Components/Tasks/Components/Explanation.js",[],"/Users/aj/Projects/personal/portfolio/src/Containers/Contact/Contact.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"155","replacedBy":"159"},{"ruleId":"157","replacedBy":"160"},{"ruleId":"155","replacedBy":"161"},{"ruleId":"157","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":131,"column":6,"nodeType":"165","endLine":131,"endColumn":38,"suggestions":"166"},{"ruleId":"155","replacedBy":"167"},{"ruleId":"157","replacedBy":"168"},{"ruleId":"155","replacedBy":"169"},{"ruleId":"157","replacedBy":"170"},{"ruleId":"163","severity":1,"message":"164","line":129,"column":6,"nodeType":"165","endLine":138,"endColumn":4,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":10,"column":3,"nodeType":"174","messageId":"175","endLine":10,"endColumn":12},{"ruleId":"172","severity":1,"message":"176","line":11,"column":3,"nodeType":"174","messageId":"175","endLine":11,"endColumn":15},{"ruleId":"172","severity":1,"message":"177","line":18,"column":3,"nodeType":"174","messageId":"175","endLine":18,"endColumn":18},{"ruleId":"172","severity":1,"message":"178","line":19,"column":3,"nodeType":"174","messageId":"175","endLine":19,"endColumn":20},{"ruleId":"172","severity":1,"message":"179","line":23,"column":3,"nodeType":"174","messageId":"175","endLine":23,"endColumn":17},{"ruleId":"172","severity":1,"message":"180","line":42,"column":22,"nodeType":"174","messageId":"175","endLine":42,"endColumn":31},{"ruleId":"155","replacedBy":"181"},{"ruleId":"157","replacedBy":"182"},{"ruleId":"172","severity":1,"message":"183","line":22,"column":7,"nodeType":"174","messageId":"175","endLine":22,"endColumn":16},{"ruleId":"172","severity":1,"message":"184","line":35,"column":3,"nodeType":"174","messageId":"175","endLine":35,"endColumn":16},{"ruleId":"172","severity":1,"message":"185","line":36,"column":3,"nodeType":"174","messageId":"175","endLine":36,"endColumn":15},{"ruleId":"172","severity":1,"message":"186","line":37,"column":3,"nodeType":"174","messageId":"175","endLine":37,"endColumn":13},{"ruleId":"172","severity":1,"message":"187","line":38,"column":3,"nodeType":"174","messageId":"175","endLine":38,"endColumn":15},{"ruleId":"172","severity":1,"message":"188","line":39,"column":3,"nodeType":"174","messageId":"175","endLine":39,"endColumn":15},{"ruleId":"172","severity":1,"message":"189","line":56,"column":9,"nodeType":"174","messageId":"175","endLine":56,"endColumn":16},{"ruleId":"172","severity":1,"message":"190","line":63,"column":10,"nodeType":"174","messageId":"175","endLine":63,"endColumn":22},{"ruleId":"172","severity":1,"message":"191","line":63,"column":24,"nodeType":"174","messageId":"175","endLine":63,"endColumn":39},{"ruleId":"172","severity":1,"message":"192","line":68,"column":10,"nodeType":"174","messageId":"175","endLine":68,"endColumn":21},{"ruleId":"172","severity":1,"message":"193","line":72,"column":10,"nodeType":"174","messageId":"175","endLine":72,"endColumn":20},{"ruleId":"172","severity":1,"message":"194","line":79,"column":27,"nodeType":"174","messageId":"175","endLine":79,"endColumn":45},{"ruleId":"172","severity":1,"message":"195","line":92,"column":9,"nodeType":"174","messageId":"175","endLine":92,"endColumn":20},{"ruleId":"163","severity":1,"message":"196","line":294,"column":6,"nodeType":"165","endLine":294,"endColumn":38,"suggestions":"197"},{"ruleId":"172","severity":1,"message":"198","line":325,"column":9,"nodeType":"174","messageId":"175","endLine":325,"endColumn":26},{"ruleId":"172","severity":1,"message":"199","line":329,"column":9,"nodeType":"174","messageId":"175","endLine":329,"endColumn":27},{"ruleId":"172","severity":1,"message":"200","line":335,"column":9,"nodeType":"174","messageId":"175","endLine":335,"endColumn":29},{"ruleId":"172","severity":1,"message":"201","line":342,"column":9,"nodeType":"174","messageId":"175","endLine":342,"endColumn":21},{"ruleId":"172","severity":1,"message":"184","line":8,"column":3,"nodeType":"174","messageId":"175","endLine":8,"endColumn":16},{"ruleId":"172","severity":1,"message":"185","line":9,"column":3,"nodeType":"174","messageId":"175","endLine":9,"endColumn":15},{"ruleId":"172","severity":1,"message":"186","line":10,"column":3,"nodeType":"174","messageId":"175","endLine":10,"endColumn":13},{"ruleId":"172","severity":1,"message":"187","line":11,"column":3,"nodeType":"174","messageId":"175","endLine":11,"endColumn":15},{"ruleId":"172","severity":1,"message":"202","line":12,"column":3,"nodeType":"174","messageId":"175","endLine":12,"endColumn":21},"no-native-reassign",["203"],"no-negated-in-lhs",["204"],["203"],["204"],["203"],["204"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updatePipeDeals'. Either include it or remove the dependency array.","ArrayExpression",["205"],["203"],["204"],["203"],["204"],["206"],"no-unused-vars","'Statistic' is defined but never used.","Identifier","unusedVar","'Descriptions' is defined but never used.","'ArrowUpOutlined' is defined but never used.","'ArrowDownOutlined' is defined but never used.","'DollarOutlined' is defined but never used.","'setLoaded' is assigned a value but never used.",["203"],["204"],"'taskIcons' is assigned a value but never used.","'CheckOutlined' is defined but never used.","'SmileTwoTone' is defined but never used.","'MehTwoTone' is defined but never used.","'PhoneTwoTone' is defined but never used.","'UserOutlined' is defined but never used.","'TabPane' is assigned a value but never used.","'showDealType' is assigned a value but never used.","'setShowDealType' is assigned a value but never used.","'noActsToday' is assigned a value but never used.","'noActsPast' is assigned a value but never used.","'setFilteredUserAct' is assigned a value but never used.","'selectActId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.dst', 'props.processedActs', and 'props.today'. Either include them or remove the dependency array. If 'setCurrentAct' needs the current value of 'props.dst', you can also switch to useReducer instead of useState and read 'props.dst' in the reducer.",["207"],"'saveEditorContent' is assigned a value but never used.","'getSavedEditorData' is assigned a value but never used.","'renderContentAsRawJs' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'ClockCircleTwoTone' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [pipeId, selectedUserId, teamId, updatePipeDeals]",{"range":"214","text":"215"},"Update the dependencies array to be: [props.deals, props.activities, props.orgs, props.pipelines, props.stages, props.selectedUserId, props.teamId, props.pipeId, updatePipeDeals]",{"range":"216","text":"217"},"Update the dependencies array to be: [filteredUserAct, props.dst, props.processedActs, props.today, selectedActId]",{"range":"218","text":"219"},[4376,4408],"[pipeId, selectedUserId, teamId, updatePipeDeals]",[3456,3616],"[props.deals, props.activities, props.orgs, props.pipelines, props.stages, props.selectedUserId, props.teamId, props.pipeId, updatePipeDeals]",[8065,8097],"[filteredUserAct, props.dst, props.processedActs, props.today, selectedActId]"]